%%
disp('LinspacePTest1')
Q1=struct('x',1,'y',2);
Q2=struct('x',8,'y',9);
n=5;
tol1=1e-3;
P2x=2.7500;
P2y=3.7500;
Pe1x=6.2500;
Pe1y=7.2500;
P = LinspaceP(Q1,Q2,n);
assert( abs(P(2).x - P2x)<tol1 && abs(P(2).y - P2y)<tol1   && ...
        abs(P(end-1).x - Pe1x)<tol1 && abs(P(end-1).y - Pe1y)<tol1 , ...
    [ '\nYour output P(2) = [' sprintf('%8.3f %8.3f ',P(2).x,P(2).y) ']' ...
      '\nYour output P(end-1) = [' sprintf('%8.3f %8.3f ',P(end-1).x,P(end-1).y) ']\n', ...
      '\nExpected output P(2) = [' sprintf('%8.3f %8.3f ',P2x,P2y) ']' ...
      '\nExpected output P(end-1) = [' sprintf('%8.3f %8.3f ',Pe1x,Pe1y) ']\n\n' ], ...
      P(2).x,P(2).y,P(end-1).x,P(end-1).y,P2x,P2y,Pe1x,Pe1y);
%%
disp('LinspacePTest2')
Q1=struct('x',1,'y',9);
Q2=struct('x',8,'y',2);
n=7;
tol1=1e-3;
P2x=2.1667;
P2y=7.8333;
Pe1x=6.8333;
Pe1y= 3.1667;
P = LinspaceP(Q1,Q2,n);
assert( abs(P(2).x - P2x)<tol1 && abs(P(2).y - P2y)<tol1   && ...
        abs(P(end-1).x - Pe1x)<tol1 && abs(P(end-1).y - Pe1y)<tol1 , ...
    [ '\nYour output P(2) = [' sprintf('%8.3f %8.3f ',P(2).x,P(2).y) ']' ...
      '\nYour output P(end-1) = [' sprintf('%8.3f %8.3f ',P(end-1).x,P(end-1).y) ']\n', ...
      '\nExpected output P(2) = [' sprintf('%8.3f %8.3f ',P2x,P2y) ']' ...
      '\nExpected output P(end-1) = [' sprintf('%8.3f %8.3f ',Pe1x,Pe1y) ']\n\n' ], ...
      P(2).x,P(2).y,P(end-1).x,P(end-1).y,P2x,P2y,Pe1x,Pe1y);
%%
disp('LinspacePTest3')
Q1=struct('x',1,'y',4);
Q2=struct('x',9,'y',7);
n=10;
tol1=1e-3;
P2x=1.8889;
P2y=4.3333;
Pe1x=8.1111;
Pe1y=6.6667;
P = LinspaceP(Q1,Q2,n);
assert( abs(P(2).x - P2x)<tol1 && abs(P(2).y - P2y)<tol1   && ...
        abs(P(end-1).x - Pe1x)<tol1 && abs(P(end-1).y - Pe1y)<tol1 , ...
    [ '\nYour output P(2) = [' sprintf('%8.3f %8.3f ',P(2).x,P(2).y) ']' ...
      '\nYour output P(end-1) = [' sprintf('%8.3f %8.3f ',P(end-1).x,P(end-1).y) ']\n', ...
      '\nExpected output P(2) = [' sprintf('%8.3f %8.3f ',P2x,P2y) ']' ...
      '\nExpected output P(end-1) = [' sprintf('%8.3f %8.3f ',Pe1x,Pe1y) ']\n\n' ], ...
      P(2).x,P(2).y,P(end-1).x,P(end-1).y,P2x,P2y,Pe1x,Pe1y);
