p<-length(phis)
#generate the white noise plus a few to get started
noise<-rnorm(T+p, sd=sqrt(sigsq))
#put the initial noise terms in and set the rest to zero
x<-c(noise[1:p],rep(0,T))
#this loop generates the AR series with the recursive formula
for (i in (p+1):(T+p))
{
x[i]<-phis %*% x[i-(1:p)] +noise[i]
}
#throw away those initial starting points
x<-x[(p+1):(T+p)]
#return the time series
x
}
x1<-arsim(c(0.5), 1,200)
x1
plot.ts(x1)
plot.ts(x1)
x1<-arsim(0.5, 1,200)
plot.ts(x1)
acf(x1)
x1<-arsim(0.5, 0,200)
acf(x1)
x1<-arsim(0.5, 5,200)
acf(x1)
x1<-arsim(-0.5, 5,200)
acf(x1)
plot.ts(x1)
x1<-arsim(1, 5,200)
acf(x1)
plot.ts(x1)
x1<-arsim(1.1, 5,200)
acf(x1)
plot.ts(x1)
x1<-arsim(1.1, 5,200)
acf(x1)
x1<-arsim(1.2, 5,200)
acf(x1)
x1<-arsim(1.3, 5,200)
acf(x1)
x1<-arsim(1.001, 5,200)
acf(x1)
plot.ts(x1)
x1<-arsim(1.01, 5,200)
acf(x1)
plot.ts(x1)
ARIMA(0,0,1
ARIMA(0,0,1)
ARIMA(0,0,1)
x<-c(2,5,3)
m<-arima(x,order=c(0,0,1))
m
plot.ts(m)
masim=function(thetas, sigsq, T){
q=length(thetas)
noise=rnorm(T+q, sd=sqrt(sigsq)) #put the initial noise terms in and set the rest to zero
x=c(noise[1:q],rep(0,T))
for (i in (q+1):(T+q)){ #this loop generates the MA series
x[i]=thetas %*% noise[i-(1:q)] +noise[i]
}
x=x[(q+1):(T+q)] #throw away those initial starting points x
}
}
masim(c(0.5, 2), 1, 10000)
ma1 <- masim(c(0.5, 2), 1, 10000)
plot.ts(ma1)
acf(ma1)
x2 <- arsim(c(0.5, 2), 1, 10000)
plot.ts(x2)
acf(x2)
x2 <- arsim(c(0.5, 2), 50, 10000)
plot.ts(x2)
x2 <- arsim(c(0.5, 2), 50, 200)
plot.ts(x2)
acf(x2)
x2 <- arsim(c(0.5, 2), 50, 200)
x2 <- arsim(c(0.5, 2), 50, 200)
plot.ts(x2)
acf(x2)
x2 <- arsim(c(0.5, 2), 50, 200)
plot.ts(x2)
acf(x2)
x2 <- arsim(c(0.5, 2), 50, 200)
plot.ts(x2)
acf(x2)
x2 <- arsim(c(0.5, 2), 50, 10000)
plot.ts(x2)
acf(x2)
x2 <- arsim(c(0.5, 2), 50, 10000)
plot.ts(x2)
x2 <- arsim(c(0.5, 2), 50, 1000)
plot.ts(x2)
acf(x2)
x2 <- arsim(c(0.5, 2), 50, 100)
plot.ts(x2)
acf(x2)
x2 <- arsim(c(0.5, 2), 50, 10)
plot.ts(x2)
acf(x2)
plot.ts(x2)
masim(c(0.5, 2), 1, 10000)
masim=function(thetas, sigsq, T)
{
# find the number of lags
q <- length(thetas)
# generate the white noise plus a few to get started
noise <- rnorm(T+q, sd=sqrt(sigsq))
# put the initial noise terms in and set the rest to zero
x <- c(noise[1:q], rep(0,T))
#this loop generates the MA series with the recursive formula
for (i in (q+1):(T+q))
{
x[i]=thetas %*% noise[i-(1:q)] +noise[i]
}
#throw away those initial starting points
x=x[(q+1):(T+q)]
#return the time series
x
}
choose(8,4)
x <- 5
t1 <- c(x, x, x, x)
x <- 5
t1 <- c(x, x, x, x)
t2 <- c(x+1, x+1, x+1, x+1)
t <- c(t1, t2)
t
unseeded = combinations(8, 4, v = t, set = F, repeats.allowed = F)
library('gtools')
x <- 5
t1 <- c(x, x, x, x)
t2 <- c(x+1, x+1, x+1, x+1)
t <- c(t1, t2)
unseeded = combinations(8, 4, v = t, set = F, repeats.allowed = F)
seeded = NULL
for(i in 1:210){
seeded = rbind(seeded, setdiff(rainfall, unseeded[i,]))
}
for(i in 1:210){
seeded = rbind(seeded, setdiff(t, unseeded[i,]))
}
for(i in 1:choose(8,4)){
seeded = rbind(seeded, setdiff(t, unseeded[i,]))
}
```
for(i in 1:choose(8,4)){
seeded = rbind(seeded, setdiff(t, unseeded[i,]))
}
seeded
teststat = rep(NA, choose(8,4))
for (i in 1:choose(8,4)){
teststat[i] = mean(seeded[i,]) - mean(unseeded[i,])
}
teststat = rep(NA, choose(8,4))
for (i in 1:choose(8,4)){
teststat[i] = mean(seeded[i,]) - mean(unseeded[i,])
}
for (i in 1:choose(8,4)){
teststat[i] = mean(seeded[,i]) - mean(unseeded[,i])
}
install.packages(perm)
install.packages('perm')
library(perm)                    # for permTS()
permTS(t1 ~ t2, alternative="greater", method="exact.mc",
+        control=permControl(nmc=10^4-1))$p.value
permTS(t1 ~ t2, alternative="greater", method="exact.mc", control=permControl(nmc=10^4-1))$p.value
x1 <- c(x, x, x, x)
y2 <- c(x+1, x+1, x+1, x+1)
DV <- c(x1, y1)
IV <- factor(rep(c("A", "B"), c(length(x1), length(y1))))
pvalue(oneway_test(DV ~ IV, alternative="greater", distribution="exact"))
x1 <- c(x, x, x, x)
y1 <- c(x+1, x+1, x+1, x+1)
DV <- c(x1, y1)
IV <- factor(rep(c("A", "B"), c(length(x1), length(y1))))
pvalue(oneway_test(DV ~ IV, alternative="greater", distribution="exact"))
library('coin')
library(coin)
install.packages('coin')
library(coin)
DV <- c(x1, y1)
IV <- factor(rep(c("A", "B"), c(length(x1), length(y1))))
pvalue(oneway_test(DV ~ IV, alternative="greater", distribution="exact"))
choose(4,2)
c <- c(5,5,6,6)
combinations(4, 2, v = c, set = F, repeats.allowed = F)
t1 <- c(1, 3, 5, 7)
t2 <- c(2, 4, 6, 8)
cloudseeding <- read.table('cloudseeding.txt', header=T)
setwd("C:/Users/Frank/Desktop/STAT 3480/Lab 2")
cloudseeding <- read.table('cloudseeding.txt', header=T)
cloudseeding
View(cloudseeding)
setwd("C:/Users/Frank/Desktop/STAT 3480/Homework 2")
t1 <- read.table('H!.txt', header=T)
t1 <- read.table('H1.txt', header=T)
t1
teststat.obs = mean(H1[treatment == "t1"]) - mean(H1[treatment == "t2"])
h1 <- read.table('H1.txt', header=T)
attach(h1)
teststat.obs = mean(h1[treatment == "t1"]) - mean(h1[treatment == "t2"])
teststat.obs
woodland <- read.table('woodland.txt', header=T)
woodland
attach(woodland)
ranks = ranks(performance)
ranks = rank(performance)
ranks = rank(woodland)
ranks
ranks = rank(obs)
ranks
w.obs = sum(ranks[group=="A"])
w.obs = sum(ranks[species=="A"])
w.obs
choose(10,5)
w.obs = sum(ranks[species=="A"])
a.ranks = combinations(10, 5, v = ranks, set = F, repeats.allowed = F)
W = rep(NA, choose(10,5))
for(i in 1:choose(10,5))
{
W[i] = sum(a.ranks[i,])
}
sum(W <= W.obs)/choose(10, 5)
sum(W <= w.obs)/choose(10, 5)
sum(W >= w.obs)/choose(10, 5)
sum(W > w.obs)/choose(10, 5)
woodland
library('gtools')
t1 <- c(1, 3, 5, 7)
t2 <- c(2, 4, 6, 8)
h1 <- read.table('H1.txt', header=T)
attach(h1)
teststat.obs = mean(h1[treatment == "t1"]) - mean(h1[treatment == "t2"])
teststat.obs
treatment 1 = combinations(8, 4, v = rainfall, set = F, repeats.allowed = F)
library('gtools')
carapace <- read.table('carapace.txt', header=T)
woodland
carapace
choose(11, 5)
sec_1 = combinations(11, 5, v = carapace, set = F, repeats.allowed = F)
attach(carapace)
sec_1 = combinations(11, 5, v = obs, set = F, repeats.allowed = F)
sec_1
seeded = NULL;
for(i in choose(11,5))
{
sec1 = rbind(seeded, setdiff(carapace, sec_1))
}
sec1
carapace
s1 = c(5, 11, 16, 8, 12)
s2 = c(17, 14, 15, 21, 19, 13)
pwd = NULL
for(i in 1:5)
{
for(j in 1:6)
pwd = c(pwd, (i-j))
}
```
pwd
length(pwd)
pwd
sort(pwd)
for(i in 1:5)
{
for(j in 1:6)
{
pwd = c(pwd, (i-j))
}
}
sort(pwd)
for(i in 1:5)
{
for(j in 1:6)
pwd = c(pwd, (i-j))
}
sort(pwd)
for(i in 1:5)
{
for(j in 1:6)
pwd = c(pwd, (i-j))
}
pwd = NULL
pwd = NULL
for(i in 1:5)
{
for(j in 1:6)
{
pwd = c(pwd, (i-j))
}
}
sort(pwd
sort(pwd)
sort(pwd)
length(pwd)
sd(s1)
std_e = sqrt(((m-1)*sd(s1)+(n-1)*sd(s2))/(n+m-2))
m = 5
n = 6
std_e = sqrt(((m-1)*sd(s1)+(n-1)*sd(s2))/(n+m-2))
qt(.05, 9, lower.tail = TRUE)
t = abs(qt(.05, 9, lower.tail = TRUE))
std_err = sqrt(((m-1)*sd(s1)+(n-1)*sd(s2))/(n+m-2))
upper = (mean(s1)-mean(s2)) + t*std_err*sqrt((1/m)+(1/n))
upper
upper = (mean(s1)-mean(s2)) + t*std_err*sqrt((1/m)+(1/n))
lower = (mean(s1)-mean(s2)) - t*std_err*sqrt((1/m)+(1/n))
lower
(mean(s1)-mean(s2))
t = (qt(.05, 9, lower.tail = TRUE))
upper = (mean(s1)-mean(s2)) + t*std_err*sqrt((1/m)+(1/n))
lower = (mean(s1)-mean(s2)) - t*std_err*sqrt((1/m)+(1/n))
lower
upper
pwd[5]
pwd[25]
for(i in 1:5)
{
for(j in 1:6)
{
pwd = c(pwd, (j-i))
}
}
sort(pwd)
pwd[5]
pwd[25]
for(i in 1:5)
{
for(j in 1:6)
{
pwd = c(pwd, (i-j))
}
}
sort(pwd)
pwd = NULL
for(i in 1:5)
{
for(j in 1:6)
{
pwd = c(pwd, (i-j))
}
}
sort(pwd)
pwd[5]
hodges_ci = c(pwd[5], pwd[25])
hodges_ci
setwd("C:/Users/Frank/Desktop/STAT 5120/Assignment 3")
GPA <- read.table('GPA.txt', header=F)
anova(GPA)
lm(GPA)
fit <- lm(GPA)
anova(fit)
help(qf)
qf(0.95,120)
qf(0.95,120, 1)
qf(0.95,120, 120)
qf(0.95,199, 1)
qf(0.95,119, 1)
qf(0.95,120, 120)
qf(0.95,118, 99)
qf(0.95,118, 1)
anova(fit)
fit <- lm(GPA)
fit
qf(0.95,118, 99)
qt(.95, 118,lower.tail = TRUE)
qt(.05, 118,lower.tail = TRUE)
upper
lower
hodges_ci
upper
lower
t1 <- c(1, 3, 5, 7)
t2 <- c(2, 4, 6, 8)
h1 <- read.table('H1.txt', header=T)
attach(h1)
teststat.obs = mean(h1[treatment == "t1"]) - mean(h1[treatment == "t2"])
teststat.obs
t1 <- c(1, 3, 5, 7)
t2 <- c(2, 4, 6, 8)
h1 <- read.table('H1.txt', header=T)
attach(h1)
setwd("C:/Users/Frank/Desktop/STAT 3480/Homework 2")
t1 <- c(1, 3, 5, 7)
t2 <- c(2, 4, 6, 8)
h1 <- read.table('H1.txt', header=T)
attach(h1)
teststat.obs = mean(h1[treatment == "t1"]) - mean(h1[treatment == "t2"])
teststat.obs
teststat.obs = mean(h1[treatment == "t1"]) - mean(h1[treatment == "t2"])
h1 <- read.table('H1.txt', header=T)
attach(h1)
teststat.obs = mean(h1[treatment == "t1"]) - mean(h1[treatment == "t2"])
teststat.obs = mean(h1[h1$treatment == "t1"]) - mean(h1[h1$treatment == "t2"])
h1
h1$treatmean
h1$treatment
h1$treatment == t1
h1$treatment == 't1'
teststat.obs = mean(h1[h1$treatment == "t1"]) - mean(h1[h1$treatment == "t2"])
h1 <- read.table('H1.txt', header=T)
attach(h1)
detach(woodland)
attach(h1)
teststat.obs = mean(h1[treatment == "t1"]) - mean(h1[treatment == "t2"])
teststat.obs
treatment 1 = combinations(8, 4, v = rainfall, set = F, repeats.allowed = F)
teststat.obs = mean(h1[treatment == "t1"]) - mean(h1[treatment == "t2"])
teststat.obs
teststat.obs = mean(h1[treatment == "t1"]) - mean(h1[treatment == "t2"])
h1
treatment
treatment == 't1'
h1[treatment == 't1']
t = c(t1, t2)
t1 <- c(1, 3, 5, 7)
t2 <- c(2, 4, 6, 8)
t = c(t1, t2)
teststat.obs = mean(t1)-mean(t2)
teststat.obs
teststat.obs = mean(h1[treatment == "t1"]) - mean(h1[treatment == "t2"])
teststat.obs
teststat.obs = mean(h1[treatment == "t1"]) - mean(h1[treatment == "t2"])
teststat.obs
teststat.obs = mean(h1[treatment == "t1"]) - mean(h1[treatment == "t2"])
teststat.obs
treatment = combinations(8, 4, v = t, set = F, repeats.allowed = F)
treatment
combo = combinations(8, 4, v = t, set = F, repeats.allowed = F)
combo
choose(8,4)
for (i in 1:70)
{
sums = sum(combo[i,])
}
sums
sums = NULL
for (i in 1:70)
{
sums = c(sums, sum(combo[i,]))
}
sums
sums = NULL
teststat.obs
teststat.obs = mean(t1)
teststat.obs
teststat.obs = sum(t1)
teststat.obs
sums
for (i in 1:70)
{
W = c(W, W(combo[i,]))
}
sums
W
W = NULL
for (i in 1:70)
{
W = c(W, W(combo[i,]))
}
for (i in 1:70)
{
W = c(W, sum(combo[i,]))
}
W
sum(W > combo)/choose(8, 4)
sum(W >= combo)/choose(8, 4)
sum(W >= combo)
sum(teststat.obs >= W)
sum(teststat.obs >= W)/choose(8, 4)
t1 <- c(2, 4, 6, 11)
t2 <- c(3, 5, 7, 12)
t = c(t1, t2)
teststat.obs = sum(t1)
teststat.obs
combo = combinations(8, 4, v = t, set = F, repeats.allowed = F)
W = NULL
for (i in 1:70)
{
W = c(W, sum(combo[i,]))
}
sum(teststat.obs >= W)/choose(8, 4)
for(i in 1:5)
{
for(j in 1:6)
{
pwd = c(pwd, (i-j))
}
}
sort(pwd)
hodges_ci = c(pwd[5], pwd[25])
hodges_ci
carapace <- read.table('carapace.txt', header=T)
carapace
attach(carapace)
s2 = c(17, 14, 15, 21, 19, 13)
s1 = c(5, 11, 16, 8, 12)
pwd = NULL
for(i in 1:5)
{
for(j in 1:6)
{
pwd = c(pwd, (i-j))
}
}
sort(pwd)
hodges_ci = c(pwd[5], pwd[25])
hodges_ci
m = 5
n = 6
