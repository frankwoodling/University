(sqrt(.2*34)*qnorm(.90))+(.4*34)+1
(sqrt(.4*34)*-qnorm(.90))+(.8*34)
(sqrt(.4*34)*qnorm(.90))+(.8*34)+1
data.3.sorted[22]
data.3.sorted[33]
1984-1951
hist(data.3)
pnorm(1.645)
pnorm(.845)
pnorm(.38)
pnorm(-.38)
qnorm(1.645)
qnorm(1.645)
pnorm(1.645)
1-pnorm(1.645)
# Problem 1
data.3 <- c(21.3, 28.8, 17.6, 23.0, 27.2, 28.5, 32.8, 28.2, 25.9, 22.5,
27.2, 33.1, 28.7, 24.8, 24.3, 27.1, 30.6, 26.8, 18.9, 36.3,
28.0, 17.9, 25.0, 27.5, 27.7, 32.1, 28.0, 30.9, 20.0, 20.2,
33.5, 26.4, 30.9, 33.2)
length(data.3)
pnorm(.2)
znorm(.2)
pnorm(.5)
pnorm(0)
znorm(0)
help(pnorm)
qnorm(.2)
qnorm(.5)
qnorm(.2)
a=qnorm(.2)*sqrt(.25*34)+17
a
(b-1-17)/sqrt(.25*34)=qnorm(.2)
a <- qnorm(.2)*sqrt(.25*34)+17
b <- qnorm(.2)*sqrt(.25*34)+18
a
b
data.3.sorted[15]
data.3.sorted[16]
data.3.sorted <- sort(data.3)
data.3.sorted[15]
data.3.sorted[16]
a <- -qnorm(.2)*sqrt(.25*34)+17
a
data.3.sorted[19]
a <- -qnorm(.8)*sqrt(.25*34)+17
b <- qnorm(.8)*sqrt(.25*34)+18
b
a
b
data.3.sorted[15]
data.3.sorted[20]
a <- -qnorm(.8)*sqrt(.25*34)+17
b <- qnorm(.8)*sqrt(.25*34)+18
data.3.sorted[15]
data.3.sorted[20]
# Interval for 80th percentile is (27.1, 28)
a
b
mean_y_hat <- mean(y_hat)
sum((y-mean(y))*(y_hat-mean(y_hat)))/sqrt(sum((y-mean(y))^2)+sum((y_hat-mean(y_hat))^2))
y <- c(23, 29, 49, 64, 74, 87, 96, 97, 109, 119, 149, 145, 154, 166)
x <- c(1, 2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9, 10, 10)
cor(y,x)
y_hat <- c(19.67, 35.18, 50.69, 66.2, 66.2, 81.71, 97.21,
97.21, 112.72, 128.23, 143.74, 143.74, 159.25, 159.25)
cor(y, y_hat)
mean_y_hat <- mean(y_hat)
sum((y-mean(y))*(y_hat-mean(y_hat)))/sqrt(sum((y-mean(y))^2)+sum((y_hat-mean(y_hat))^2))
y_hat <- c(19.67, 35.18, 50.69, 66.2, 66.2, 81.71, 97.21,
97.21, 112.72, 128.23, 143.74, 143.74, 159.25, 159.25)
(y-mean(y))*(y_hat-mean(y_hat))
sum((y-mean(y))*(y_hat-mean(y_hat)))
sum((y-y_hat)^2)
sum((y-mean(y)^2)*sum((y_ha))
source('C:/Users/Frank/Desktop/STAT 5120/Assignment 1.R', echo=TRUE)
sum((y-mean(y)^2)*sum((y_hat-mean(y_hat)^2))
###################################
x <- c(70, 75, 80, 80, 85, 90)
sum((y-mean(y)^2)
sum((y_hat-mean(y_hat)^2))
sum((y_hat-mean(y_hat)^2))
sum((y-mean(y)^2))*sum((y_hat-mean(y_hat)^2))
sqrt(sum((y-mean(y)^2))*sum((y_hat-mean(y_hat)^2)))
sum((y-mean(y))*(y_hat-mean(y_hat)))
a <- sum((y-mean(y))*(y_hat-mean(y_hat)))
b <- sqrt(sum((y-mean(y)^2))*sum((y_hat-mean(y_hat)^2)))
a/b
sum((y-mean(y))^2)
((y-mean(y))^2)
cor(y, y_hat)
cor(y,x)
sum(y-y_hat)^2
sum((y-y_hat)^2)
((y-y_hat)^2)
sum((y-y_hat)^2)
fit <- lm(y~x)
summary(fit)
1-sum(y_hat^2)/sum(y^2)
SSE /6-1
SSE <- sum((y-y_hat)^2)
SSE
[1] 348.7212
SSE/6-1
SSE/(6-1)
SSE
x <- c(70, 75, 80, 80, 85, 90)
y <- c(75, 82, 80, 86, 90, 91)
y_hat <- 20+.8*x
y_hat
fit <- lm(y~x)
summary(fit)
SSE <- sum((y-y_hat)^2)
SSE
# [1] 348.7212
# c.
SSE/(6-1)
SSE <- sum((y-y_hat)^2)
SSE
add(2,3)
add<-function(a,b){
result<-a+b
result}
add(2,3)
randomwalk<-function(sigsq,T)
{
x<-rep(0,T)
w<-rnorm(T,sd=sqrt(sigsq))
for ( i in 2:T)
{
x[i]<-x[i-1]+w[i]
}
x
}
randomwalk(0,1)
randomwalk(1,10)
acf(randomwalk(1,10))
acf(randomwalk(1,20))
acf(randomwalk(5,20))
x <- rep(0,10)
x
w <- rnorm(10, sd=sqrt(1))
w
w <- rnorm(10, sd=sqrt(1))
w
arsim<-function(phis, sigsq, T){
#find the number of lags in our AR
p<-length(phis)
#generate the white noise plus a few to get started
noise<-rnorm(T+p, sd=sqrt(sigsq))
#put the initial noise terms in and set the rest to zero
x<-c(noise[1:p],rep(0,T))
#this loop generates the AR series with the recursive formula
for (i in (p+1):(T+p))
{
x[i]<-phis %*% x[i-(1:p)] +noise[i]
}
#throw away those initial starting points
x<-x[(p+1):(T+p)]
#return the time series
x
}
arsim<-function(phis, sigsq, T){
#find the number of lags in our AR
p<-length(phis)
#generate the white noise plus a few to get started
noise<-rnorm(T+p, sd=sqrt(sigsq))
#put the initial noise terms in and set the rest to zero
x<-c(noise[1:p],rep(0,T))
#this loop generates the AR series with the recursive formula
for (i in (p+1):(T+p))
{
x[i]<-phis %*% x[i-(1:p)] +noise[i]
}
#throw away those initial starting points
x<-x[(p+1):(T+p)]
#return the time series
x
}
x1<-arsim(c(0.5), 1,200)
x1
plot.ts(x1)
plot.ts(x1)
x1<-arsim(0.5, 1,200)
plot.ts(x1)
acf(x1)
x1<-arsim(0.5, 0,200)
acf(x1)
x1<-arsim(0.5, 5,200)
acf(x1)
x1<-arsim(-0.5, 5,200)
acf(x1)
plot.ts(x1)
x1<-arsim(1, 5,200)
acf(x1)
plot.ts(x1)
x1<-arsim(1.1, 5,200)
acf(x1)
plot.ts(x1)
x1<-arsim(1.1, 5,200)
acf(x1)
x1<-arsim(1.2, 5,200)
acf(x1)
x1<-arsim(1.3, 5,200)
acf(x1)
x1<-arsim(1.001, 5,200)
acf(x1)
plot.ts(x1)
x1<-arsim(1.01, 5,200)
acf(x1)
plot.ts(x1)
ARIMA(0,0,1
ARIMA(0,0,1)
ARIMA(0,0,1)
x<-c(2,5,3)
m<-arima(x,order=c(0,0,1))
m
plot.ts(m)
masim=function(thetas, sigsq, T){
q=length(thetas)
noise=rnorm(T+q, sd=sqrt(sigsq)) #put the initial noise terms in and set the rest to zero
x=c(noise[1:q],rep(0,T))
for (i in (q+1):(T+q)){ #this loop generates the MA series
x[i]=thetas %*% noise[i-(1:q)] +noise[i]
}
x=x[(q+1):(T+q)] #throw away those initial starting points x
}
}
masim(c(0.5, 2), 1, 10000)
ma1 <- masim(c(0.5, 2), 1, 10000)
plot.ts(ma1)
acf(ma1)
x2 <- arsim(c(0.5, 2), 1, 10000)
plot.ts(x2)
acf(x2)
x2 <- arsim(c(0.5, 2), 50, 10000)
plot.ts(x2)
x2 <- arsim(c(0.5, 2), 50, 200)
plot.ts(x2)
acf(x2)
x2 <- arsim(c(0.5, 2), 50, 200)
x2 <- arsim(c(0.5, 2), 50, 200)
plot.ts(x2)
acf(x2)
x2 <- arsim(c(0.5, 2), 50, 200)
plot.ts(x2)
acf(x2)
x2 <- arsim(c(0.5, 2), 50, 200)
plot.ts(x2)
acf(x2)
x2 <- arsim(c(0.5, 2), 50, 10000)
plot.ts(x2)
acf(x2)
x2 <- arsim(c(0.5, 2), 50, 10000)
plot.ts(x2)
x2 <- arsim(c(0.5, 2), 50, 1000)
plot.ts(x2)
acf(x2)
x2 <- arsim(c(0.5, 2), 50, 100)
plot.ts(x2)
acf(x2)
x2 <- arsim(c(0.5, 2), 50, 10)
plot.ts(x2)
acf(x2)
plot.ts(x2)
masim(c(0.5, 2), 1, 10000)
masim=function(thetas, sigsq, T)
{
# find the number of lags
q <- length(thetas)
# generate the white noise plus a few to get started
noise <- rnorm(T+q, sd=sqrt(sigsq))
# put the initial noise terms in and set the rest to zero
x <- c(noise[1:q], rep(0,T))
#this loop generates the MA series with the recursive formula
for (i in (q+1):(T+q))
{
x[i]=thetas %*% noise[i-(1:q)] +noise[i]
}
#throw away those initial starting points
x=x[(q+1):(T+q)]
#return the time series
x
}
polyroot(c(c,b,a))
polyroot(c(c,b,a^2))
Mod(polyroot(c(c,b,a))
Mod(polyroot(c(c,b,a)))
Mod(polyroot(c(c,b,a)))
phi1<-c(1,1/6,-1/3)
polyroot(phi1)
theta1<-c(1,-5/2,1)
polyroot(theta1)
polyroot(c(1, .4, .45))
polyroot(c(1, -8/3, -1))
polyroot(C(1,7/6,1/3))
polyroot(C(1, 7/6, 1/3))
polyroot(c(1, -2/3, -1))
polyroot(c(1, 5/2, 1))
polyroot(c(1, -9/4, -9/4))
polyroot(c(1, -3, 1/9, -1/3))
polyroot(c(1, -8/3, -1))
polyroot(C(1, 7/6, 1/3))
polyroot(1,.5)
polyroot(1,-.5)
polyroot(1,.5, 0)
polyroot(c(1,.5))
polyroot(c(1, -8/3, -1))
polyroot(C(1, 7/6, 1/3))
polyroot(c(1, -2/3, -1))
polyroot(c(1, 5/2, 1))
polyroot(c(1, -9/4, -9/4))
polyroot(c(1, -3, 1/9, -1/3))
polyroot(c(1, -9/4, -9/4))
polyroot(c(1, -3, 1/9, -1/3))
armatoMA(ar=1/9, ma=1/12, 5)
ARMAtoMA(ar=1/9, ma=1/12, 5)
source("http://www4.stat.ncsu.edu/~lu/ST505/Rcode/functions-Ch4.R")
x = c(8, 10, 12, 13, 11, 2, 6, 7, 11, 5, 4, 10, 9, 8, 10, 3, 5, 9, 10, 6, 9, 7, 5, 5, 3)
blocks = rep(1:5,5)
grps = rep(1:5,rep(5,5))
x
grps
blocks
summary(aov(x~factor(grps)+factor(blocks)))
soybean <- read.csv("http://www4.stat.ncsu.edu/~wang/courses/ST505/data/soybean.csv")
soybean
x~factor(grps)+factor(blocks)
x~factor(grps)+factor(blocks)
aov(x~factor(grps)+factor(blocks))
permSSTM <- perm.approx.RCBD(x,grps,blocks,R=1000)
permSSTM
factorial(4)^6
factorial(4)
24^6
combinations
setwd("C:/Users/Frank/Desktop/STAT 3480/Homework 3")
library('gtools')
combinations
help(combinations)
source("http://www4.stat.ncsu.edu/~lu/ST505/Rcode/functions-Ch4.R")
x = c(8, 10, 12, 13, 11, 2, 6, 7, 11, 5, 4, 10, 9, 8, 10, 3, 5, 9, 10, 6, 9, 7, 5, 5, 3)
blocks = rep(1:5,5)
grps = rep(1:5,rep(5,5))
x
blocks
grps
x = c(8, 10, 12, 13, 11, 2, 6, 7, 11, 5, 4, 10, 9, 8, 10, 3, 5, 9, 10, 6, 9, 7, 5, 5, 3)
blocks = rep(1:5,5)
grps = rep(1:5,rep(5,5))
x
blocks
grps
#F-test
summary(aov(x~factor(grps)+factor(blocks)))
#  Permutation Test for RCBD
### Step 1: calculate observed SSTM:sum of squared group-means
SSTMobs <- getSSTM(x,grps)
SSTMobs
### Step 2: obtain the permutation distribution of SSTM under H0
###             i.e. obtain SSTM*'s with R permutations
permSSTM <- perm.approx.RCBD(x,grps,blocks,R=1000)
### Step3: calculate the p-value
(pval = mean(permSSTM >= SSTMobs))
grps = rep(1:5,rep(5,5))
grps
grps = rep(1:6,rep(3,3))
grps = rep(1:6,rep(5,5))
help(rep)
grps = rep(1:6,rep(6,6,6))
grps
blocks = rep(1:6,6)
blocks
blocks = rep(1:6,3)
blocks
x = c(8, 10, 12, 13, 11, 2, 6, 7, 11, 5, 4, 10, 9, 8, 10, 3, 5, 9, 10, 6, 9, 7, 5, 5, 3)
blocks = rep(1:5,5)
grps = rep(1:5,rep(5,5))
grps
blocks
grps
blocks = rep(1:6,3)
grps = rep(1:6,rep(6,6,6)) # fix this
blocks
grps
grps = rep(1:3,rep(6,6,6)) # fix this
rep(1:4, c(2,2,2,2))
rep(1:3,rep(6,6,6))
rep(1:3,rep(2, 2, 2))
rep(1:3)
rep(1:3,rep(1, 1, 1))
rep(1:3,rep(3, 3, 3))
rep(1:3,rep(6, 6, 6))
rep(1:3,rep(5, 5, 5))
x = c(1.5, 2.1, 1.9, 2.8, 1.4, 1.8,
1.8, 2.0, 2.0, 2.7, 1.6, 2.3,
1.9, 2.5, 2.5, 2.6, 2.1, 2.4)
blocks = rep(1:6,3)
grps = c(1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,3,3)
summary(aov(x~factor(grps)+factor(blocks)))
rep(1:3)
SSTMobs <- getSSTM(x,grps)
SSTMobs
permSSTM <- perm.approx.RCBD(x,grps,blocks,R=1000)
(pval = mean(permSSTM >= SSTMobs))
length(permSSTM)
summary(aov(x~factor(grps)+factor(blocks)))
(pval = mean(permSSTM >= SSTMobs))
summary(aov(x~factor(grps)+factor(blocks)))
SSTMobs
summary(aov(x~factor(grps)+factor(blocks)))
anova(aov(x~factor(grps)+factor(blocks)))
(pval = mean(permSSTM >= SSTMobs))
(pval = mean(permSSTM >= SSTMobs))
anova(aov(x~factor(grps)+factor(blocks)))
x = c(1.5, 2.1, 1.9, 2.8, 1.4, 1.8,
1.8, 2.0, 2.0, 2.7, 1.6, 2.3,
1.9, 2.5, 2.5, 2.6, 2.1, 2.4)
blocks = rep(1:6,3)
grps = c(1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,3,3)
mat <- cbind(x,grps,blocks)
mat <- mat[order(mat[,3]),]
Rij = rankinblock(x,blocks)
SSTMobs <- getSSTM(Rij,grps)
set.seed(12379901)
permSSTM <- perm.approx.RCBD(Rij,grps,blocks,1000)
(pval=mean(permSSTM >= SSTMobs))
friedman.test(x, grps, blocks)  ### based on chi-square approximation
Ri = getmeans(Rij, grps)
K = length(unique(grps))
J = length(unique(blocks))
Sbj2 = apply(matrix(Rij, ncol=J, byrow=T),2,var)
(FM = J^2/sum(Sbj2)*sum((Ri - (K+1)/2)^2))
blocks = rep(1:6, 6)
blocks
grps = rep(1:6, each=6)
x = c(6.81, 6.16, 5.92, 5.86, 5.80, 5.39,
6.68, 6.30, 6.12, 5.71, 6.09, 5.28,
6.34, 6.22, 5.90, 5.38, 5.20, 5.46,
6.68, 5.24, 5.83, 5.49, 5.37, 5.43,
6.79, 6.28, 6.23, 5.85, 5.56, 5.38,
6.85, 6.51, 5.95, 6.06, 6.31, 5.39)
blocks = rep(1:6, 6)
grps = rep(1:6, each=6)
dat = matrix(x, byrow=T, ncol=6)
getsums(rankinblock(x,blocks), grps)
(Pageobs <- getPage(x, grps,blocks))
permPage <- perm.approx.Page(x,grps,blocks,1000)
# tests if means are arranged t1 > t2 > t3 > t4, i.e. response decreases as changing trt from 1 to 4
(pval = mean(permPage <= Pageobs))
## correlation of trt i with the trt-specific rank sum R_i
cor(1:4, getsums(rankinblock(x,blocks),grps))
friedman.test(x, grps, blocks)  ### based on chi-square approximation
(Pageobs <- getPage(x, grps,blocks)) ### wrong!
mean(permPage <= Pageobs) ### wrong!
(newgrps = rep(c(4,2,3,1), each=6))
(Pageobs <- getPage(x,newgrps,blocks))
mean(permPage <= Pageobs)
## correlation of trt i with the trt-specific rank sum R_i
cor(1:4, getsums(rankinblock(x,blocks),grps))  ### wrong
cor(c(4,2,3,1), getsums(rankinblock(x,blocks),grps)) ### correct
cor(1:4, getsums(rankinblock(x,blocks),grps))
x = c(6.81, 6.16, 5.92, 5.86, 5.80, 5.39,
6.68, 6.30, 6.12, 5.71, 6.09, 5.28,
6.34, 6.22, 5.90, 5.38, 5.20, 5.46,
6.68, 5.24, 5.83, 5.49, 5.37, 5.43,
6.79, 6.28, 6.23, 5.85, 5.56, 5.38,
6.85, 6.51, 5.95, 6.06, 6.31, 5.39)
blocks = rep(1:6, 6)
grps = rep(1:6, each=6)
dat = matrix(x, byrow=T, ncol=6)
getsums(rankinblock(x,blocks), grps)
(Pageobs <- getPage(x, grps,blocks))
permPage <- perm.approx.Page(x,grps,blocks,1000)
(pval = mean(permPage <= Pageobs))
(pval = mean(permPage >= Pageobs))
(pval = mean(permSSTM >= SSTMobs))
source("http://www4.stat.ncsu.edu/~lu/ST505/Rcode/functions-Ch4.R")
#F-test
summary(aov(x~factor(grps)+factor(blocks)))
#  Permutation Test for RCBD
### Step 1: calculate observed SSTM:sum of squared group-means
SSTMobs <- getSSTM(x,grps)
### Step 2: obtain the permutation distribution of SSTM under H0
###             i.e. obtain SSTM*'s with R permutations
permSSTM <- perm.approx.RCBD(x,grps,blocks,R=1000)
### Step3: calculate the p-value
(pval = mean(permSSTM >= SSTMobs))
anova(aov(x~factor(grps)+factor(blocks)))
x <- c(1.5, 2.1, 1.9, 2.8, 1.4, 1.8,
1.8, 2.0, 2.0, 2.7, 1.6, 2.3,
1.9, 2.5, 2.5, 2.6, 2.1, 2.4)
#F-test
summary(aov(x~factor(grps)+factor(blocks)))
SSTMobs <- getSSTM(x,grps)
permSSTM <- perm.approx.RCBD(x,grps,blocks,R=1000)
### Step3: calculate the p-value
(pval = mean(permSSTM >= SSTMobs))
x = c(1.5, 2.1, 1.9, 2.8, 1.4, 1.8,
1.8, 2.0, 2.0, 2.7, 1.6, 2.3,
1.9, 2.5, 2.5, 2.6, 2.1, 2.4)
blocks = rep(1:6,3)
grps = c(1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,3,3)
#F-test
summary(aov(x~factor(grps)+factor(blocks)))
SSTMobs <- getSSTM(x,grps)
### Step 2: obtain the permutation distribution of SSTM under H0
###             i.e. obtain SSTM*'s with R permutations
permSSTM <- perm.approx.RCBD(x,grps,blocks,R=1000)
### Step3: calculate the p-value
(pval = mean(permSSTM >= SSTMobs))
anova(aov(x~factor(grps)+factor(blocks)))
