data.3.sorted[20]
a <- -qnorm(.8)*sqrt(.25*34)+17
b <- qnorm(.8)*sqrt(.25*34)+18
data.3.sorted[15]
data.3.sorted[20]
# Interval for 80th percentile is (27.1, 28)
a
b
mean_y_hat <- mean(y_hat)
sum((y-mean(y))*(y_hat-mean(y_hat)))/sqrt(sum((y-mean(y))^2)+sum((y_hat-mean(y_hat))^2))
y <- c(23, 29, 49, 64, 74, 87, 96, 97, 109, 119, 149, 145, 154, 166)
x <- c(1, 2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9, 10, 10)
cor(y,x)
y_hat <- c(19.67, 35.18, 50.69, 66.2, 66.2, 81.71, 97.21,
97.21, 112.72, 128.23, 143.74, 143.74, 159.25, 159.25)
cor(y, y_hat)
mean_y_hat <- mean(y_hat)
sum((y-mean(y))*(y_hat-mean(y_hat)))/sqrt(sum((y-mean(y))^2)+sum((y_hat-mean(y_hat))^2))
y_hat <- c(19.67, 35.18, 50.69, 66.2, 66.2, 81.71, 97.21,
97.21, 112.72, 128.23, 143.74, 143.74, 159.25, 159.25)
(y-mean(y))*(y_hat-mean(y_hat))
sum((y-mean(y))*(y_hat-mean(y_hat)))
sum((y-y_hat)^2)
sum((y-mean(y)^2)*sum((y_ha))
source('C:/Users/Frank/Desktop/STAT 5120/Assignment 1.R', echo=TRUE)
sum((y-mean(y)^2)*sum((y_hat-mean(y_hat)^2))
###################################
x <- c(70, 75, 80, 80, 85, 90)
sum((y-mean(y)^2)
sum((y_hat-mean(y_hat)^2))
sum((y_hat-mean(y_hat)^2))
sum((y-mean(y)^2))*sum((y_hat-mean(y_hat)^2))
sqrt(sum((y-mean(y)^2))*sum((y_hat-mean(y_hat)^2)))
sum((y-mean(y))*(y_hat-mean(y_hat)))
a <- sum((y-mean(y))*(y_hat-mean(y_hat)))
b <- sqrt(sum((y-mean(y)^2))*sum((y_hat-mean(y_hat)^2)))
a/b
sum((y-mean(y))^2)
((y-mean(y))^2)
cor(y, y_hat)
cor(y,x)
sum(y-y_hat)^2
sum((y-y_hat)^2)
((y-y_hat)^2)
sum((y-y_hat)^2)
fit <- lm(y~x)
summary(fit)
1-sum(y_hat^2)/sum(y^2)
SSE /6-1
SSE <- sum((y-y_hat)^2)
SSE
[1] 348.7212
SSE/6-1
SSE/(6-1)
SSE
x <- c(70, 75, 80, 80, 85, 90)
y <- c(75, 82, 80, 86, 90, 91)
y_hat <- 20+.8*x
y_hat
fit <- lm(y~x)
summary(fit)
SSE <- sum((y-y_hat)^2)
SSE
# [1] 348.7212
# c.
SSE/(6-1)
SSE <- sum((y-y_hat)^2)
SSE
add(2,3)
add<-function(a,b){
result<-a+b
result}
add(2,3)
randomwalk<-function(sigsq,T)
{
x<-rep(0,T)
w<-rnorm(T,sd=sqrt(sigsq))
for ( i in 2:T)
{
x[i]<-x[i-1]+w[i]
}
x
}
randomwalk(0,1)
randomwalk(1,10)
acf(randomwalk(1,10))
acf(randomwalk(1,20))
acf(randomwalk(5,20))
x <- rep(0,10)
x
w <- rnorm(10, sd=sqrt(1))
w
w <- rnorm(10, sd=sqrt(1))
w
arsim<-function(phis, sigsq, T){
#find the number of lags in our AR
p<-length(phis)
#generate the white noise plus a few to get started
noise<-rnorm(T+p, sd=sqrt(sigsq))
#put the initial noise terms in and set the rest to zero
x<-c(noise[1:p],rep(0,T))
#this loop generates the AR series with the recursive formula
for (i in (p+1):(T+p))
{
x[i]<-phis %*% x[i-(1:p)] +noise[i]
}
#throw away those initial starting points
x<-x[(p+1):(T+p)]
#return the time series
x
}
arsim<-function(phis, sigsq, T){
#find the number of lags in our AR
p<-length(phis)
#generate the white noise plus a few to get started
noise<-rnorm(T+p, sd=sqrt(sigsq))
#put the initial noise terms in and set the rest to zero
x<-c(noise[1:p],rep(0,T))
#this loop generates the AR series with the recursive formula
for (i in (p+1):(T+p))
{
x[i]<-phis %*% x[i-(1:p)] +noise[i]
}
#throw away those initial starting points
x<-x[(p+1):(T+p)]
#return the time series
x
}
x1<-arsim(c(0.5), 1,200)
x1
plot.ts(x1)
plot.ts(x1)
x1<-arsim(0.5, 1,200)
plot.ts(x1)
acf(x1)
x1<-arsim(0.5, 0,200)
acf(x1)
x1<-arsim(0.5, 5,200)
acf(x1)
x1<-arsim(-0.5, 5,200)
acf(x1)
plot.ts(x1)
x1<-arsim(1, 5,200)
acf(x1)
plot.ts(x1)
x1<-arsim(1.1, 5,200)
acf(x1)
plot.ts(x1)
x1<-arsim(1.1, 5,200)
acf(x1)
x1<-arsim(1.2, 5,200)
acf(x1)
x1<-arsim(1.3, 5,200)
acf(x1)
x1<-arsim(1.001, 5,200)
acf(x1)
plot.ts(x1)
x1<-arsim(1.01, 5,200)
acf(x1)
plot.ts(x1)
ARIMA(0,0,1
ARIMA(0,0,1)
ARIMA(0,0,1)
x<-c(2,5,3)
m<-arima(x,order=c(0,0,1))
m
plot.ts(m)
masim=function(thetas, sigsq, T){
q=length(thetas)
noise=rnorm(T+q, sd=sqrt(sigsq)) #put the initial noise terms in and set the rest to zero
x=c(noise[1:q],rep(0,T))
for (i in (q+1):(T+q)){ #this loop generates the MA series
x[i]=thetas %*% noise[i-(1:q)] +noise[i]
}
x=x[(q+1):(T+q)] #throw away those initial starting points x
}
}
masim(c(0.5, 2), 1, 10000)
ma1 <- masim(c(0.5, 2), 1, 10000)
plot.ts(ma1)
acf(ma1)
x2 <- arsim(c(0.5, 2), 1, 10000)
plot.ts(x2)
acf(x2)
x2 <- arsim(c(0.5, 2), 50, 10000)
plot.ts(x2)
x2 <- arsim(c(0.5, 2), 50, 200)
plot.ts(x2)
acf(x2)
x2 <- arsim(c(0.5, 2), 50, 200)
x2 <- arsim(c(0.5, 2), 50, 200)
plot.ts(x2)
acf(x2)
x2 <- arsim(c(0.5, 2), 50, 200)
plot.ts(x2)
acf(x2)
x2 <- arsim(c(0.5, 2), 50, 200)
plot.ts(x2)
acf(x2)
x2 <- arsim(c(0.5, 2), 50, 10000)
plot.ts(x2)
acf(x2)
x2 <- arsim(c(0.5, 2), 50, 10000)
plot.ts(x2)
x2 <- arsim(c(0.5, 2), 50, 1000)
plot.ts(x2)
acf(x2)
x2 <- arsim(c(0.5, 2), 50, 100)
plot.ts(x2)
acf(x2)
x2 <- arsim(c(0.5, 2), 50, 10)
plot.ts(x2)
acf(x2)
plot.ts(x2)
masim(c(0.5, 2), 1, 10000)
masim=function(thetas, sigsq, T)
{
# find the number of lags
q <- length(thetas)
# generate the white noise plus a few to get started
noise <- rnorm(T+q, sd=sqrt(sigsq))
# put the initial noise terms in and set the rest to zero
x <- c(noise[1:q], rep(0,T))
#this loop generates the MA series with the recursive formula
for (i in (q+1):(T+q))
{
x[i]=thetas %*% noise[i-(1:q)] +noise[i]
}
#throw away those initial starting points
x=x[(q+1):(T+q)]
#return the time series
x
}
polyroot(c(c,b,a))
polyroot(c(c,b,a^2))
Mod(polyroot(c(c,b,a))
Mod(polyroot(c(c,b,a)))
Mod(polyroot(c(c,b,a)))
phi1<-c(1,1/6,-1/3)
polyroot(phi1)
theta1<-c(1,-5/2,1)
polyroot(theta1)
polyroot(c(1, .4, .45))
polyroot(c(1, -8/3, -1))
polyroot(C(1,7/6,1/3))
polyroot(C(1, 7/6, 1/3))
polyroot(c(1, -2/3, -1))
polyroot(c(1, 5/2, 1))
polyroot(c(1, -9/4, -9/4))
polyroot(c(1, -3, 1/9, -1/3))
polyroot(c(1, -8/3, -1))
polyroot(C(1, 7/6, 1/3))
polyroot(1,.5)
polyroot(1,-.5)
polyroot(1,.5, 0)
polyroot(c(1,.5))
polyroot(c(1, -8/3, -1))
polyroot(C(1, 7/6, 1/3))
polyroot(c(1, -2/3, -1))
polyroot(c(1, 5/2, 1))
polyroot(c(1, -9/4, -9/4))
polyroot(c(1, -3, 1/9, -1/3))
polyroot(c(1, -9/4, -9/4))
polyroot(c(1, -3, 1/9, -1/3))
armatoMA(ar=1/9, ma=1/12, 5)
ARMAtoMA(ar=1/9, ma=1/12, 5)
setwd("C:/Users/Frank/Desktop/STAT 3480/Lab 6")
runtime <- read.table("moviesall.txt")
attach(runtime)
kruskal.test(runtime ~ rating)
t.j = c(2,6,3,3,2,3,5,2,3,4,5,3,3,5,4,5,4,3,6,2,3,4,3,3,3,4,5,3,2,3,2,2,2,3)
n.i = c(4, 21, 65, 50); N = sum(n.i)
ranks = rank(runtime) ### rank the data
R.i = c(mean(ranks[rating=="G"]), mean(ranks[rating=="PG"]), mean(ranks[rating=="PG-13"]),
mean(ranks[rating=="R"]))
KW.noties = 12/(N*(N+1)) * sum( n.i*(R.i - (N+1)/2)^2 )
teststat.obs = KW.noties/( 1 - sum( t.j^3 - t.j )/(N^3 - N) )
teststat = rep(NA, 1000)
for(i in 1:1000) {
### randomly "shuffle" the rating labels for the movies
ratingSHUFFLE = sample(rating)
### compute the KW statistic for the shuffled data
R.i = c(mean(ranks[ratingSHUFFLE=="G"]), mean(ranks[ratingSHUFFLE=="PG"]),
mean(ranks[ratingSHUFFLE=="PG-13"]), mean(ranks[ratingSHUFFLE=="R"]))
KW.noties = 12/(N*(N+1)) * sum( n.i*(R.i - (N+1)/2)^2 )
teststat[i] = KW.noties/( 1 - sum( t.j^3 - t.j )/(N^3 - N) )
}
### calculate the approximate p-value
sum(teststat >= teststat.obs)/1000
R.i = c(mean(ranks[rating=="G"]), mean(ranks[rating=="PG"]), mean(ranks[rating=="PG-13"]),
mean(ranks[rating=="R"]))
head(runtime)
runtime <- read.table("moviesall.txt", header=T)
attach(runtime)
### calculate the observed KW statistic
t.j = c(2,6,3,3,2,3,5,2,3,4,5,3,3,5,4,5,4,3,6,2,3,4,3,3,3,4,5,3,2,3,2,2,2,3)
n.i = c(4, 21, 65, 50); N = sum(n.i)
ranks = rank(runtime) ### rank the data
R.i = c(mean(ranks[rating=="G"]), mean(ranks[rating=="PG"]), mean(ranks[rating=="PG-13"]),
mean(ranks[rating=="R"]))
KW.noties = 12/(N*(N+1)) * sum( n.i*(R.i - (N+1)/2)^2 )
teststat.obs = KW.noties/( 1 - sum( t.j^3 - t.j )/(N^3 - N) )
teststat = rep(NA, 1000)
for(i in 1:1000) {
### randomly "shuffle" the rating labels for the movies
ratingSHUFFLE = sample(rating)
### compute the KW statistic for the shuffled data
R.i = c(mean(ranks[ratingSHUFFLE=="G"]), mean(ranks[ratingSHUFFLE=="PG"]),
mean(ranks[ratingSHUFFLE=="PG-13"]), mean(ranks[ratingSHUFFLE=="R"]))
KW.noties = 12/(N*(N+1)) * sum( n.i*(R.i - (N+1)/2)^2 )
teststat[i] = KW.noties/( 1 - sum( t.j^3 - t.j )/(N^3 - N) )
}
### calculate the approximate p-value
sum(teststat >= teststat.obs)/1000
teststat.obs
runtime <- read.table("moviesall.txt", header=T)
attach(runtime)
t.j = c(2,6,3,3,2,3,5,2,3,4,5,3,3,5,4,5,4,3,6,2,3,4,3,3,3,4,5,3,2,3,2,2,2,3)
n.i = c(4, 21, 65, 50); N = sum(n.i)
ranks = rank(runtime) ### rank the data
R.i = c(mean(ranks[rating=="G"]), mean(ranks[rating=="PG"]), mean(ranks[rating=="PG-13"]),
mean(ranks[rating=="R"]))
KW.noties = 12/(N*(N+1)) * sum( n.i*(R.i - (N+1)/2)^2 )
teststat.obs = KW.noties/( 1 - sum( t.j^3 - t.j )/(N^3 - N) )
teststat = rep(NA, 1000)
for(i in 1:1000) {
### randomly "shuffle" the rating labels for the movies
ratingSHUFFLE = sample(rating)
### compute the KW statistic for the shuffled data
R.i = c(mean(ranks[ratingSHUFFLE=="G"]), mean(ranks[ratingSHUFFLE=="PG"]),
mean(ranks[ratingSHUFFLE=="PG-13"]), mean(ranks[ratingSHUFFLE=="R"]))
KW.noties = 12/(N*(N+1)) * sum( n.i*(R.i - (N+1)/2)^2 )
teststat[i] = KW.noties/( 1 - sum( t.j^3 - t.j )/(N^3 - N) )
}
### calculate the approximate p-value
sum(teststat >= teststat.obs)/1000
teststat.obs
sum(teststat >= teststat.obs)/1000
sum(teststat >= teststat.obs)/1000
teststat.obs
runtime <- read.table("moviesall.txt", header=T)
attach(runtime)
head(runtime)
movies <- read.table("moviesall.txt", header=T)
attach(movies)
t.j = c(2,6,3,3,2,3,5,2,3,4,5,3,3,5,4,5,4,3,6,2,3,4,3,3,3,4,5,3,2,3,2,2,2,3)
n.i = c(4, 21, 65, 50); N = sum(n.i)
ranks = rank(runtime) ### rank the data
R.i = c(mean(ranks[rating=="G"]), mean(ranks[rating=="PG"]), mean(ranks[rating=="PG-13"]),
mean(ranks[rating=="R"]))
KW.noties = 12/(N*(N+1)) * sum( n.i*(R.i - (N+1)/2)^2 )
teststat.obs = KW.noties/( 1 - sum( t.j^3 - t.j )/(N^3 - N) )
teststat = rep(NA, 1000)
for(i in 1:1000) {
### randomly "shuffle" the rating labels for the movies
ratingSHUFFLE = sample(rating)
### compute the KW statistic for the shuffled data
R.i = c(mean(ranks[ratingSHUFFLE=="G"]), mean(ranks[ratingSHUFFLE=="PG"]),
mean(ranks[ratingSHUFFLE=="PG-13"]), mean(ranks[ratingSHUFFLE=="R"]))
KW.noties = 12/(N*(N+1)) * sum( n.i*(R.i - (N+1)/2)^2 )
teststat[i] = KW.noties/( 1 - sum( t.j^3 - t.j )/(N^3 - N) )
}
### calculate the approximate p-value
sum(teststat >= teststat.obs)/1000
teststat.obs
sum(teststat >= teststat.obs)/1000
teststat.obs
kruskal.test(runtime ~ rating)
kruskal.test(runtime, rating)
kruskal.test(runtime~rating)
head(movies)
kruskal.test(runtime~rating)
help(kruskal.test)
kruskal.test(runtime~rating, data = movies)
sum(teststat >= teststat.obs)/1000
teststat.obs
kruskal.test(runtime~rating, data = movies)
movies <- read.table("moviesall.txt", header=T)
attach(movies)
### calculate the observed KW statistic
t.j = c(2,6,3,3,2,3,5,2,3,4,5,3,3,5,4,5,4,3,6,2,3,4,3,3,3,4,5,3,2,3,2,2,2,3)
n.i = c(4, 21, 65, 50); N = sum(n.i)
ranks = rank(runtime) ### rank the data
R.i = c(mean(ranks[rating=="G"]), mean(ranks[rating=="PG"]), mean(ranks[rating=="PG-13"]),
mean(ranks[rating=="R"]))
KW.noties = 12/(N*(N+1)) * sum( n.i*(R.i - (N+1)/2)^2 )
teststat.obs = KW.noties/( 1 - sum( t.j^3 - t.j )/(N^3 - N) )
teststat = rep(NA, 1000)
for(i in 1:1000) {
### randomly "shuffle" the rating labels for the movies
ratingSHUFFLE = sample(rating)
R.i = c(mean(ranks[ratingSHUFFLE=="G"]), mean(ranks[ratingSHUFFLE=="PG"]),
mean(ranks[ratingSHUFFLE=="PG-13"]), mean(ranks[ratingSHUFFLE=="R"]))
KW.noties = 12/(N*(N+1)) * sum( n.i*(R.i - (N+1)/2)^2 )
}
### calculate the approximate p-value
sum(teststat >= teststat.obs)/1000
```
teststat.obs
teststat[i] = KW.noties/( 1 - sum( t.j^3 - t.j )/(N^3 - N) )
### compute the KW statistic for the shuffled data
teststat.obs
sum(teststat >= teststat.obs)/1000
movies <- read.table("moviesall.txt", header=T)
attach(movies)
### calculate the observed KW statistic
t.j = c(2,6,3,3,2,3,5,2,3,4,5,3,3,5,4,5,4,3,6,2,3,4,3,3,3,4,5,3,2,3,2,2,2,3)
n.i = c(4, 21, 65, 50); N = sum(n.i)
ranks = rank(runtime) ### rank the data
R.i = c(mean(ranks[rating=="G"]), mean(ranks[rating=="PG"]), mean(ranks[rating=="PG-13"]),
mean(ranks[rating=="R"]))
KW.noties = 12/(N*(N+1)) * sum( n.i*(R.i - (N+1)/2)^2 )
teststat.obs = KW.noties/( 1 - sum( t.j^3 - t.j )/(N^3 - N) )
teststat = rep(NA, 1000)
for(i in 1:1000) {
### randomly "shuffle" the rating labels for the movies
ratingSHUFFLE = sample(rating)
### compute the KW statistic for the shuffled data
R.i = c(mean(ranks[ratingSHUFFLE=="G"]), mean(ranks[ratingSHUFFLE=="PG"]),
mean(ranks[ratingSHUFFLE=="PG-13"]), mean(ranks[ratingSHUFFLE=="R"]))
KW.noties = 12/(N*(N+1)) * sum( n.i*(R.i - (N+1)/2)^2 )
teststat[i] = KW.noties/( 1 - sum( t.j^3 - t.j )/(N^3 - N) )
}
### calculate the approximate p-value
sum(teststat >= teststat.obs)/1000
teststat.obs
teststat
sum(teststat >= teststat.obs)
sum(teststat >= teststat.obs)/1000
teststat.obs
kruskal.test(runtime~rating, data = movies)
teststat.obs
movies <- read.table("moviesall.txt", header=T)
attach(movies)
### calculate the observed KW statistic
t.j = c(2,6,3,3,2,3,5,2,3,4,5,3,3,5,4,5,4,3,6,2,3,4,3,3,3,4,5,3,2,3,2,2,2,3)
n.i = c(4, 21, 65, 50); N = sum(n.i)
ranks = rank(runtime) ### rank the data
R.i = c(mean(ranks[rating=="G"]), mean(ranks[rating=="PG"]), mean(ranks[rating=="PG-13"]),
mean(ranks[rating=="R"]))
KW.noties = 12/(N*(N+1)) * sum( n.i*(R.i - (N+1)/2)^2 )
teststat.obs = KW.noties/( 1 - sum( t.j^3 - t.j )/(N^3 - N) )
teststat = rep(NA, 1000)
for(i in 1:1000) {
### randomly "shuffle" the rating labels for the movies
ratingSHUFFLE = sample(rating)
### compute the KW statistic for the shuffled data
R.i = c(mean(ranks[ratingSHUFFLE=="G"]), mean(ranks[ratingSHUFFLE=="PG"]),
mean(ranks[ratingSHUFFLE=="PG-13"]), mean(ranks[ratingSHUFFLE=="R"]))
KW.noties = 12/(N*(N+1)) * sum( n.i*(R.i - (N+1)/2)^2 )
teststat[i] = KW.noties/( 1 - sum( t.j^3 - t.j )/(N^3 - N) )
}
### calculate the approximate p-value
sum(teststat >= teststat.obs)/1000
teststat.obs
kruskal.test(runtime~rating, data = movies)
table(runtime)
table(runtime)
movies <- read.table("moviesall.txt", header=T)
attach(movies)
table(runtime)
histogram(table(runtime))
hist(table(runtime))
head(movies)
t.j = c(2,6,3,3,2,3,5,2,3,4,5,3,3,5,4,5,4,3,6,2,3,4,3,3,3,4,5,3,2,3,2,2,2,3)
n.i = c(4, 21, 65, 50); N = sum(n.i)
ranks = rank(score) ### rank the data
R.i = c(mean(ranks[rating=="G"]), mean(ranks[rating=="PG"]), mean(ranks[rating=="PG-13"]),
mean(ranks[rating=="R"]))
KW.noties = 12/(N*(N+1)) * sum( n.i*(R.i - (N+1)/2)^2 )
teststat.obs = KW.noties/( 1 - sum( t.j^3 - t.j )/(N^3 - N) )
teststat = rep(NA, 1000)
for(i in 1:1000) {
### randomly "shuffle" the rating labels for the movies
ratingSHUFFLE = sample(rating)
### compute the KW statistic for the shuffled data
R.i = c(mean(ranks[ratingSHUFFLE=="G"]), mean(ranks[ratingSHUFFLE=="PG"]),
mean(ranks[ratingSHUFFLE=="PG-13"]), mean(ranks[ratingSHUFFLE=="R"]))
KW.noties = 12/(N*(N+1)) * sum( n.i*(R.i - (N+1)/2)^2 )
teststat[i] = KW.noties/( 1 - sum( t.j^3 - t.j )/(N^3 - N) )
}
### calculate the approximate p-value
sum(teststat >= teststat.obs)/1000
teststat.obs
kruskal.test(score~ratings)
kruskal.test(score~rating)
teststat.obs
movies <- read.table("moviesall.txt", header=T)
attach(movies)
### calculate the observed KW statistic
t.j = c(2,6,3,3,2,3,5,2,3,4,5,3,3,5,4,5,4,3,6,2,3,4,3,3,3,4,5,3,2,3,2,2,2,3)
n.i = c(4, 21, 65, 50); N = sum(n.i)
ranks = rank(score) ### rank the data
R.i = c(mean(ranks[rating=="G"]), mean(ranks[rating=="PG"]), mean(ranks[rating=="PG-13"]),
mean(ranks[rating=="R"]))
KW.noties = 12/(N*(N+1)) * sum( n.i*(R.i - (N+1)/2)^2 )
teststat.obs = KW.noties/( 1 - sum( t.j^3 - t.j )/(N^3 - N) )
teststat = rep(NA, 1000)
for(i in 1:1000) {
### randomly "shuffle" the rating labels for the movies
ratingSHUFFLE = sample(rating)
### compute the KW statistic for the shuffled data
R.i = c(mean(ranks[ratingSHUFFLE=="G"]), mean(ranks[ratingSHUFFLE=="PG"]),
mean(ranks[ratingSHUFFLE=="PG-13"]), mean(ranks[ratingSHUFFLE=="R"]))
KW.noties = 12/(N*(N+1)) * sum( n.i*(R.i - (N+1)/2)^2 )
teststat[i] = KW.noties/( 1 - sum( t.j^3 - t.j )/(N^3 - N) )
}
### calculate the approximate p-value
sum(teststat >= teststat.obs)/1000
teststat.obs
kruskal.test(score~rating)
kruskal.test(gross~rating)
