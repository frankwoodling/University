subset(mtcars, qsec <= 16.9)
subset(mtcars, wt < 2)
lightCars <- subset(mtcars, wt < 2)
mtcars$year <- 1974
View(mtcars)
mtcars <- subset(mtcars, select = -year)
View(mtcars)
mtcars$year <- c(1973, 1974)
View(mtcars)
mtcars <- subset(mtcars, select = -year)
View(mtcars)
mtcars$wt
cond <- mtcars$wt < 3
cond
mtcars$weight_class <- ifelse(cond, 'light', 'average')
mtcars$weight_class
cond <- mtcars$wt > 3.5
mtcars$weight_class <- ifelse(cond, 'heavy', mtcars$weight_class)
mtcars$weight_class
rm(cond)
rm(efficient)
install.packages('knitr', dependencies = T)
install.packages("knitr", dependencies = T)
library(knitr)
subset(mtcars, mpg >= 30 | hp < 60)
data.1 <- c(79, 74, 88, 80, 80, 66, 65, 86, 84, 80, 78, 72, 71, 74, 86, 96, 77, 81, 76, 80,
76, 75, 78, 87, 87, 74, 85, 84, 76, 77, 76, 74, 85, 74, 76, 74, 81, 76)
length(data.1)
data.1 <- c(79, 74, 88, 80, 80, 66, 65, 86, 84, 80, 78, 72, 71, 74, 86, 96, 77, 81, 76, 80,
76, 75, 78, 87, 87, 74, 85, 84, 76, 77, 76, 74, 85, 74, 76, 77, 76, 74, 81, 76)
median(data.1)
[1] 77
b <- data.1 > 70
b
b <- subset(data.1, data.1 > 70)
b
length(b)
b <- length(subset(data.1, data.1 > 70))
b
z_b <- (38-20)/sqrt(.25*40)
z_b
normsdist
help(normdist)
??normdist
p_val = pnorm(z_b)
p_val
p_val = pnorm(-z_b)
p_val
z.test(data.1)
ztest(data.1)
data.3 <- c(21.3, 28.8, 17.6, 23.0, 27.2, 28.5, 32.8, 28.2, 25.9, 22.5, 27.2)
length(data.3)
data.3 <- c(21.3, 28.8, 17.6, 23.0, 27.2, 28.5, 32.8, 28.2, 25.9, 22.5,
27.2, 33.1, 28.7, 24.8, 24.3, 27.1, 30.6, 26.8, 18.9, 36.3,
28.0, 17.9, 25.0, 27.5, 27.7, 32.1, 28.0, 30.9, 20.0, 20.2,
33.5, 26.4, 30.9, 33.2)
length(data.3)
sqrt(.25*34)
(sqrt(.25*34)*-1.96)+(.5*34)
(sqrt(.25*34)*-1.96)+(.5*34))
(sqrt(.25*34)*-1.96)+(.5*34)
(sqrt(.25*34)*1.96)+(.5*34)+1
sort(data.3)
data.3.sorted <- sort(data.3)
data.3.sorted(11)
data.3.sorted(24)
data.3.sorted <- sort(data.3)
data.3.sorted(11)
data.3.sorted <- sort(data.3)
data.3.sorted(11)
data.3.sorted[11]
data.3.sorted[24]
median(data.3)
2*1:5
[1]  2  4  6  8 10
(2*1):5
seq(1,19, by=2)
x <- seq(1,19, by=2)
y = c(-1, 2, -3, 4, -5)
y
abs(y)
z = abs(y)
z
help(chisq)
??(chisq)
??chisq
help(qf)
help(qchisq)
qchisq(.95, 10)
qchisq(.95, 10, lower.tail=T)
qchisq(.95, 10, lower.tail=F)
x = rnorm(1000)
summary(x)
mean(rnorm)
mean(x)
mean(x)
var(x)
hist(x)
hist(x, main="1000 Random number histogram")
hist(x, main="Histogram of 1000 Random Numbers")
hist(x, main="Histogram of 1000 Random Numbers", xlab="data")
data.3 <- c(21.3, 28.8, 17.6, 23.0, 27.2, 28.5, 32.8, 28.2, 25.9, 22.5,
27.2, 33.1, 28.7, 24.8, 24.3, 27.1, 30.6, 26.8, 18.9, 36.3,
28.0, 17.9, 25.0, 27.5, 27.7, 32.1, 28.0, 30.9, 20.0, 20.2,
33.5, 26.4, 30.9, 33.2)
pnorm(.9)
pnorm(.9, two.tailed = T)
pnorm(.95)
qnorm(.95)
qnorm(.90)
(sqrt(.1*34)*qnorm(.90))+(.2*34)
(sqrt(.1*34)*qnorm(.90))+(.2*34)
(sqrt(.1*34)*-qnorm(.90))+(.2*34)
(sqrt(.1*34)*qnorm(.90))+(.2*34)+1
data.3.sorted[4]
data.3.sorted[10]
data.3 <- c(21.3, 28.8, 17.6, 23.0, 27.2, 28.5, 32.8, 28.2, 25.9, 22.5,
27.2, 33.1, 28.7, 24.8, 24.3, 27.1, 30.6, 26.8, 18.9, 36.3,
28.0, 17.9, 25.0, 27.5, 27.7, 32.1, 28.0, 30.9, 20.0, 20.2,
33.5, 26.4, 30.9, 33.2)
(sqrt(.1*34)*-qnorm(.90))+(.2*34)
(sqrt(.1*34)*qnorm(.90))+(.2*34)+1
data.3.sorted[4]
data.3 <- c(21.3, 28.8, 17.6, 23.0, 27.2, 28.5, 32.8, 28.2, 25.9, 22.5,
27.2, 33.1, 28.7, 24.8, 24.3, 27.1, 30.6, 26.8, 18.9, 36.3,
28.0, 17.9, 25.0, 27.5, 27.7, 32.1, 28.0, 30.9, 20.0, 20.2,
33.5, 26.4, 30.9, 33.2)
# a.
(sqrt(.25*34)*-1.96)+(.5*34)
# a = [1] 11.28567
(sqrt(.25*34)*1.96)+(.5*34)+1
# b = [1] 23.71433
data.3.sorted <- sort(data.3)
data.3.sorted[11]
data.3.sorted[24]
# interval is (25, 28.7)
# b.
(sqrt(.1*34)*-qnorm(.90))+(.2*34)
(sqrt(.1*34)*qnorm(.90))+(.2*34)+1
data.3.sorted[4]
data.3.sorted[10]
(sqrt(.2*34)*-qnorm(.90))+(.4*34)
(sqrt(.2*34)*qnorm(.90))+(.4*34)+1
(sqrt(.4*34)*-qnorm(.90))+(.8*34)
(sqrt(.4*34)*qnorm(.90))+(.8*34)+1
data.3.sorted[22]
data.3.sorted[33]
1984-1951
hist(data.3)
pnorm(1.645)
pnorm(.845)
pnorm(.38)
pnorm(-.38)
qnorm(1.645)
qnorm(1.645)
pnorm(1.645)
1-pnorm(1.645)
# Problem 1
data.3 <- c(21.3, 28.8, 17.6, 23.0, 27.2, 28.5, 32.8, 28.2, 25.9, 22.5,
27.2, 33.1, 28.7, 24.8, 24.3, 27.1, 30.6, 26.8, 18.9, 36.3,
28.0, 17.9, 25.0, 27.5, 27.7, 32.1, 28.0, 30.9, 20.0, 20.2,
33.5, 26.4, 30.9, 33.2)
length(data.3)
pnorm(.2)
znorm(.2)
pnorm(.5)
pnorm(0)
znorm(0)
help(pnorm)
qnorm(.2)
qnorm(.5)
qnorm(.2)
a=qnorm(.2)*sqrt(.25*34)+17
a
(b-1-17)/sqrt(.25*34)=qnorm(.2)
a <- qnorm(.2)*sqrt(.25*34)+17
b <- qnorm(.2)*sqrt(.25*34)+18
a
b
data.3.sorted[15]
data.3.sorted[16]
data.3.sorted <- sort(data.3)
data.3.sorted[15]
data.3.sorted[16]
a <- -qnorm(.2)*sqrt(.25*34)+17
a
data.3.sorted[19]
a <- -qnorm(.8)*sqrt(.25*34)+17
b <- qnorm(.8)*sqrt(.25*34)+18
b
a
b
data.3.sorted[15]
data.3.sorted[20]
a <- -qnorm(.8)*sqrt(.25*34)+17
b <- qnorm(.8)*sqrt(.25*34)+18
data.3.sorted[15]
data.3.sorted[20]
# Interval for 80th percentile is (27.1, 28)
a
b
mean_y_hat <- mean(y_hat)
sum((y-mean(y))*(y_hat-mean(y_hat)))/sqrt(sum((y-mean(y))^2)+sum((y_hat-mean(y_hat))^2))
y <- c(23, 29, 49, 64, 74, 87, 96, 97, 109, 119, 149, 145, 154, 166)
x <- c(1, 2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9, 10, 10)
cor(y,x)
y_hat <- c(19.67, 35.18, 50.69, 66.2, 66.2, 81.71, 97.21,
97.21, 112.72, 128.23, 143.74, 143.74, 159.25, 159.25)
cor(y, y_hat)
mean_y_hat <- mean(y_hat)
sum((y-mean(y))*(y_hat-mean(y_hat)))/sqrt(sum((y-mean(y))^2)+sum((y_hat-mean(y_hat))^2))
y_hat <- c(19.67, 35.18, 50.69, 66.2, 66.2, 81.71, 97.21,
97.21, 112.72, 128.23, 143.74, 143.74, 159.25, 159.25)
(y-mean(y))*(y_hat-mean(y_hat))
sum((y-mean(y))*(y_hat-mean(y_hat)))
sum((y-y_hat)^2)
sum((y-mean(y)^2)*sum((y_ha))
source('C:/Users/Frank/Desktop/STAT 5120/Assignment 1.R', echo=TRUE)
sum((y-mean(y)^2)*sum((y_hat-mean(y_hat)^2))
###################################
x <- c(70, 75, 80, 80, 85, 90)
sum((y-mean(y)^2)
sum((y_hat-mean(y_hat)^2))
sum((y_hat-mean(y_hat)^2))
sum((y-mean(y)^2))*sum((y_hat-mean(y_hat)^2))
sqrt(sum((y-mean(y)^2))*sum((y_hat-mean(y_hat)^2)))
sum((y-mean(y))*(y_hat-mean(y_hat)))
a <- sum((y-mean(y))*(y_hat-mean(y_hat)))
b <- sqrt(sum((y-mean(y)^2))*sum((y_hat-mean(y_hat)^2)))
a/b
sum((y-mean(y))^2)
((y-mean(y))^2)
cor(y, y_hat)
cor(y,x)
sum(y-y_hat)^2
sum((y-y_hat)^2)
((y-y_hat)^2)
sum((y-y_hat)^2)
fit <- lm(y~x)
summary(fit)
1-sum(y_hat^2)/sum(y^2)
SSE /6-1
SSE <- sum((y-y_hat)^2)
SSE
[1] 348.7212
SSE/6-1
SSE/(6-1)
SSE
x <- c(70, 75, 80, 80, 85, 90)
y <- c(75, 82, 80, 86, 90, 91)
y_hat <- 20+.8*x
y_hat
fit <- lm(y~x)
summary(fit)
SSE <- sum((y-y_hat)^2)
SSE
# [1] 348.7212
# c.
SSE/(6-1)
SSE <- sum((y-y_hat)^2)
SSE
add(2,3)
add<-function(a,b){
result<-a+b
result}
add(2,3)
randomwalk<-function(sigsq,T)
{
x<-rep(0,T)
w<-rnorm(T,sd=sqrt(sigsq))
for ( i in 2:T)
{
x[i]<-x[i-1]+w[i]
}
x
}
randomwalk(0,1)
randomwalk(1,10)
acf(randomwalk(1,10))
acf(randomwalk(1,20))
acf(randomwalk(5,20))
x <- rep(0,10)
x
w <- rnorm(10, sd=sqrt(1))
w
w <- rnorm(10, sd=sqrt(1))
w
arsim<-function(phis, sigsq, T){
#find the number of lags in our AR
p<-length(phis)
#generate the white noise plus a few to get started
noise<-rnorm(T+p, sd=sqrt(sigsq))
#put the initial noise terms in and set the rest to zero
x<-c(noise[1:p],rep(0,T))
#this loop generates the AR series with the recursive formula
for (i in (p+1):(T+p))
{
x[i]<-phis %*% x[i-(1:p)] +noise[i]
}
#throw away those initial starting points
x<-x[(p+1):(T+p)]
#return the time series
x
}
arsim<-function(phis, sigsq, T){
#find the number of lags in our AR
p<-length(phis)
#generate the white noise plus a few to get started
noise<-rnorm(T+p, sd=sqrt(sigsq))
#put the initial noise terms in and set the rest to zero
x<-c(noise[1:p],rep(0,T))
#this loop generates the AR series with the recursive formula
for (i in (p+1):(T+p))
{
x[i]<-phis %*% x[i-(1:p)] +noise[i]
}
#throw away those initial starting points
x<-x[(p+1):(T+p)]
#return the time series
x
}
x1<-arsim(c(0.5), 1,200)
x1
plot.ts(x1)
plot.ts(x1)
x1<-arsim(0.5, 1,200)
plot.ts(x1)
acf(x1)
x1<-arsim(0.5, 0,200)
acf(x1)
x1<-arsim(0.5, 5,200)
acf(x1)
x1<-arsim(-0.5, 5,200)
acf(x1)
plot.ts(x1)
x1<-arsim(1, 5,200)
acf(x1)
plot.ts(x1)
x1<-arsim(1.1, 5,200)
acf(x1)
plot.ts(x1)
x1<-arsim(1.1, 5,200)
acf(x1)
x1<-arsim(1.2, 5,200)
acf(x1)
x1<-arsim(1.3, 5,200)
acf(x1)
x1<-arsim(1.001, 5,200)
acf(x1)
plot.ts(x1)
x1<-arsim(1.01, 5,200)
acf(x1)
plot.ts(x1)
ARIMA(0,0,1
ARIMA(0,0,1)
ARIMA(0,0,1)
x<-c(2,5,3)
m<-arima(x,order=c(0,0,1))
m
plot.ts(m)
masim=function(thetas, sigsq, T){
q=length(thetas)
noise=rnorm(T+q, sd=sqrt(sigsq)) #put the initial noise terms in and set the rest to zero
x=c(noise[1:q],rep(0,T))
for (i in (q+1):(T+q)){ #this loop generates the MA series
x[i]=thetas %*% noise[i-(1:q)] +noise[i]
}
x=x[(q+1):(T+q)] #throw away those initial starting points x
}
}
masim(c(0.5, 2), 1, 10000)
ma1 <- masim(c(0.5, 2), 1, 10000)
plot.ts(ma1)
acf(ma1)
x2 <- arsim(c(0.5, 2), 1, 10000)
plot.ts(x2)
acf(x2)
x2 <- arsim(c(0.5, 2), 50, 10000)
plot.ts(x2)
x2 <- arsim(c(0.5, 2), 50, 200)
plot.ts(x2)
acf(x2)
x2 <- arsim(c(0.5, 2), 50, 200)
x2 <- arsim(c(0.5, 2), 50, 200)
plot.ts(x2)
acf(x2)
x2 <- arsim(c(0.5, 2), 50, 200)
plot.ts(x2)
acf(x2)
x2 <- arsim(c(0.5, 2), 50, 200)
plot.ts(x2)
acf(x2)
x2 <- arsim(c(0.5, 2), 50, 10000)
plot.ts(x2)
acf(x2)
x2 <- arsim(c(0.5, 2), 50, 10000)
plot.ts(x2)
x2 <- arsim(c(0.5, 2), 50, 1000)
plot.ts(x2)
acf(x2)
x2 <- arsim(c(0.5, 2), 50, 100)
plot.ts(x2)
acf(x2)
x2 <- arsim(c(0.5, 2), 50, 10)
plot.ts(x2)
acf(x2)
plot.ts(x2)
masim(c(0.5, 2), 1, 10000)
masim=function(thetas, sigsq, T)
{
# find the number of lags
q <- length(thetas)
# generate the white noise plus a few to get started
noise <- rnorm(T+q, sd=sqrt(sigsq))
# put the initial noise terms in and set the rest to zero
x <- c(noise[1:q], rep(0,T))
#this loop generates the MA series with the recursive formula
for (i in (q+1):(T+q))
{
x[i]=thetas %*% noise[i-(1:q)] +noise[i]
}
#throw away those initial starting points
x=x[(q+1):(T+q)]
#return the time series
x
}
polyroot(c(c,b,a))
polyroot(c(c,b,a^2))
Mod(polyroot(c(c,b,a))
Mod(polyroot(c(c,b,a)))
Mod(polyroot(c(c,b,a)))
phi1<-c(1,1/6,-1/3)
polyroot(phi1)
theta1<-c(1,-5/2,1)
polyroot(theta1)
polyroot(c(1, .4, .45))
polyroot(c(1, -8/3, -1))
polyroot(C(1,7/6,1/3))
polyroot(C(1, 7/6, 1/3))
polyroot(c(1, -2/3, -1))
polyroot(c(1, 5/2, 1))
polyroot(c(1, -9/4, -9/4))
polyroot(c(1, -3, 1/9, -1/3))
polyroot(c(1, -8/3, -1))
polyroot(C(1, 7/6, 1/3))
polyroot(1,.5)
polyroot(1,-.5)
polyroot(1,.5, 0)
polyroot(c(1,.5))
polyroot(c(1, -8/3, -1))
polyroot(C(1, 7/6, 1/3))
polyroot(c(1, -2/3, -1))
polyroot(c(1, 5/2, 1))
polyroot(c(1, -9/4, -9/4))
polyroot(c(1, -3, 1/9, -1/3))
polyroot(c(1, -9/4, -9/4))
polyroot(c(1, -3, 1/9, -1/3))
armatoMA(ar=1/9, ma=1/12, 5)
ARMAtoMA(ar=1/9, ma=1/12, 5)
4+7+7+7+8+8+8+9+9+9
4+5+5+5+6+6+8+8+8+9
3+5+5+6+6+7+7+8+8+9
4+5+5+5+6+6+8+8+8+9
3+5+5+6+6+7+7+8+8+9
1+2+5+5+6+8+8+9+9+10
2+4+7+7+7+7+9+9+10
(2+4+7+7+7+7+9+9+10)/9
setwd("C:/Users/Frank/Desktop/STAT 3480/Lab 7")
movies <- read.table('moviesall.txt', header = T)
pval = rep(NA, 20)
for(i in 1:20)
{
data = rnorm(100, 10, 5)
pval[i] <- t.test(data, mu = 10, alt = "two.sided")$p.value
}
pval = rep(NA, 1000)
for(i in 1:1000) {
data = rnorm(100, 10, 5)
pval[i] = t.test(data, mu = 10, alternative = "two.sided")$p.value
}
sum(pval < .05)
sum(pval < .05)/1000
pval = rep(NA, 1000)
for(i in 1:1000) {
data = rnorm(100, 10, 5)
pval[i] = t.test(data, mu = 10, alternative = "two.sided")$p.value
}
sum(pval < .05)
sum(pval < .05)/1000
pval = rep(NA, 1000)
for(i in 1:1000) {
data = rnorm(100, 10, 5)
pval[i] = t.test(data, mu = 10, alternative = "two.sided")$p.value
}
sum(pval < .05)
sum(pval < .05)/1000
0.05/6
help(subset)
subset(movies, rating == "G" or rating == "PG")
subset(movies, rating == "G" | rating == "PG")
attach(movies)
sub.7 <- subset(movies, rating == "G" | rating == "PG")
help(kruskal.test)
kruskal.test(runtime~rating, sub.7)
kruskal.test(runtime~rating, sub.7)
kruskal.test(runtime~rating, movies)
kruskal.test(runtime~rating, sub.7)
size(sub.7)
dim(sub.7)
choose(25,2)
0.07496*300
0.07496*25
