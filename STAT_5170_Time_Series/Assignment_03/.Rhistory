}
x
}
randomwalk(0,1)
randomwalk(1,10)
acf(randomwalk(1,10))
acf(randomwalk(1,20))
acf(randomwalk(5,20))
x <- rep(0,10)
x
w <- rnorm(10, sd=sqrt(1))
w
w <- rnorm(10, sd=sqrt(1))
w
arsim<-function(phis, sigsq, T){
#find the number of lags in our AR
p<-length(phis)
#generate the white noise plus a few to get started
noise<-rnorm(T+p, sd=sqrt(sigsq))
#put the initial noise terms in and set the rest to zero
x<-c(noise[1:p],rep(0,T))
#this loop generates the AR series with the recursive formula
for (i in (p+1):(T+p))
{
x[i]<-phis %*% x[i-(1:p)] +noise[i]
}
#throw away those initial starting points
x<-x[(p+1):(T+p)]
#return the time series
x
}
arsim<-function(phis, sigsq, T){
#find the number of lags in our AR
p<-length(phis)
#generate the white noise plus a few to get started
noise<-rnorm(T+p, sd=sqrt(sigsq))
#put the initial noise terms in and set the rest to zero
x<-c(noise[1:p],rep(0,T))
#this loop generates the AR series with the recursive formula
for (i in (p+1):(T+p))
{
x[i]<-phis %*% x[i-(1:p)] +noise[i]
}
#throw away those initial starting points
x<-x[(p+1):(T+p)]
#return the time series
x
}
x1<-arsim(c(0.5), 1,200)
x1
plot.ts(x1)
plot.ts(x1)
x1<-arsim(0.5, 1,200)
plot.ts(x1)
acf(x1)
x1<-arsim(0.5, 0,200)
acf(x1)
x1<-arsim(0.5, 5,200)
acf(x1)
x1<-arsim(-0.5, 5,200)
acf(x1)
plot.ts(x1)
x1<-arsim(1, 5,200)
acf(x1)
plot.ts(x1)
x1<-arsim(1.1, 5,200)
acf(x1)
plot.ts(x1)
x1<-arsim(1.1, 5,200)
acf(x1)
x1<-arsim(1.2, 5,200)
acf(x1)
x1<-arsim(1.3, 5,200)
acf(x1)
x1<-arsim(1.001, 5,200)
acf(x1)
plot.ts(x1)
x1<-arsim(1.01, 5,200)
acf(x1)
plot.ts(x1)
ARIMA(0,0,1
ARIMA(0,0,1)
ARIMA(0,0,1)
x<-c(2,5,3)
m<-arima(x,order=c(0,0,1))
m
plot.ts(m)
masim=function(thetas, sigsq, T){
q=length(thetas)
noise=rnorm(T+q, sd=sqrt(sigsq)) #put the initial noise terms in and set the rest to zero
x=c(noise[1:q],rep(0,T))
for (i in (q+1):(T+q)){ #this loop generates the MA series
x[i]=thetas %*% noise[i-(1:q)] +noise[i]
}
x=x[(q+1):(T+q)] #throw away those initial starting points x
}
}
masim(c(0.5, 2), 1, 10000)
ma1 <- masim(c(0.5, 2), 1, 10000)
plot.ts(ma1)
acf(ma1)
x2 <- arsim(c(0.5, 2), 1, 10000)
plot.ts(x2)
acf(x2)
x2 <- arsim(c(0.5, 2), 50, 10000)
plot.ts(x2)
x2 <- arsim(c(0.5, 2), 50, 200)
plot.ts(x2)
acf(x2)
x2 <- arsim(c(0.5, 2), 50, 200)
x2 <- arsim(c(0.5, 2), 50, 200)
plot.ts(x2)
acf(x2)
x2 <- arsim(c(0.5, 2), 50, 200)
plot.ts(x2)
acf(x2)
x2 <- arsim(c(0.5, 2), 50, 200)
plot.ts(x2)
acf(x2)
x2 <- arsim(c(0.5, 2), 50, 10000)
plot.ts(x2)
acf(x2)
x2 <- arsim(c(0.5, 2), 50, 10000)
plot.ts(x2)
x2 <- arsim(c(0.5, 2), 50, 1000)
plot.ts(x2)
acf(x2)
x2 <- arsim(c(0.5, 2), 50, 100)
plot.ts(x2)
acf(x2)
x2 <- arsim(c(0.5, 2), 50, 10)
plot.ts(x2)
acf(x2)
plot.ts(x2)
masim(c(0.5, 2), 1, 10000)
masim=function(thetas, sigsq, T)
{
# find the number of lags
q <- length(thetas)
# generate the white noise plus a few to get started
noise <- rnorm(T+q, sd=sqrt(sigsq))
# put the initial noise terms in and set the rest to zero
x <- c(noise[1:q], rep(0,T))
#this loop generates the MA series with the recursive formula
for (i in (q+1):(T+q))
{
x[i]=thetas %*% noise[i-(1:q)] +noise[i]
}
#throw away those initial starting points
x=x[(q+1):(T+q)]
#return the time series
x
}
mortality<-scan("yule1.dat", skip=12)
marriages<-scan("yule2.dat", skip=12)
time<-1866:1911
setwd("C:/Users/Frank/Desktop/STAT 5170/Assignment 3")
mortality<-scan("yule1.dat", skip=12)
marriages<-scan("yule2.dat", skip=12)
time<-1866:1911
par(mfrow=c(3,1))
plot.ts(marriages)
plot.ts(mortality)
plot(marriages~mortality)
timefit<-lm(marriages~time)
anova(timefit)
summary(timefit)
AIC(timefit)
timeres<-residuals(timefit)
plot(timeres)
abline(h=0, col="red")
acf(timeres)
qqnorm(timeres)
fits<-timefit$fitted.values
plot(fits,timeres,main="Residuals against fitted values")
abline(h=0, col="red")
loess.fit<-loess(y~x, data.frame(x=fits,y=timeres))
yhat.grid<-seq(from=min(fits),to=max(fits),length=200)
tmp<-predict(loess.fit,newdata=data.frame(x=yhat.grid), se=T)
lines(yhat.grid,tmp$fit,lwd=3, col="blue")
lines(yhat.grid,tmp$fit-2*tmp$se.fit, lwd=2, lty=2, col="blue")
fits<-timefit$fitted.values
plot(fits,timeres,main="Residuals against fitted values")
abline(h=0, col="red")
plot.new()
fits<-timefit$fitted.values
plot(fits,timeres,main="Residuals against fitted values")
abline(h=0, col="red")
loess.fit<-loess(y~x, data.frame(x=fits,y=timeres))
yhat.grid<-seq(from=min(fits),to=max(fits),length=200)
tmp<-predict(loess.fit,newdata=data.frame(x=yhat.grid), se=T)
lines(yhat.grid,tmp$fit,lwd=3, col="blue")
lines(yhat.grid,tmp$fit-2*tmp$se.fit, lwd=2, lty=2, col="blue")
lines(yhat.grid,tmp$fit+2*tmp$se.fit, lwd=2, lty=2, col="blue")
plot.new()
fits<-timefit$fitted.values
plot(fits,timeres,main="Residuals against fitted values")
abline(h=0, col="red")
loess.fit<-loess(y~x, data.frame(x=fits,y=timeres))
yhat.grid<-seq(from=min(fits),to=max(fits),length=200)
tmp<-predict(loess.fit,newdata=data.frame(x=yhat.grid), se=T)
lines(yhat.grid,tmp$fit,lwd=3, col="blue")
lines(yhat.grid,tmp$fit-2*tmp$se.fit, lwd=2, lty=2, col="blue")
plot.new()
fits<-timefit$fitted.values
plot(fits,timeres,main="Residuals against fitted values")
abline(h=0, col="red")
loess.fit<-loess(y~x, data.frame(x=fits,y=timeres))
yhat.grid<-seq(from=min(fits),to=max(fits),length=200)
tmp<-predict(loess.fit,newdata=data.frame(x=yhat.grid), se=T)
lines(yhat.grid,tmp$fit,lwd=3, col="blue")
lines(yhat.grid,tmp$fit-2*tmp$se.fit, lwd=2, lty=2, col="blue")
plot.new()
fits<-timefit$fitted.values
plot(fits,timeres,main="Residuals against fitted values")
abline(h=0, col="red")
loess.fit<-loess(y~x, data.frame(x=fits,y=timeres))
yhat.grid<-seq(from=min(fits),to=max(fits),length=200)
tmp<-predict(loess.fit,newdata=data.frame(x=yhat.grid), se=T)
lines(yhat.grid,tmp$fit,lwd=3, col="blue")
lines(yhat.grid,tmp$fit-2*tmp$se.fit, lwd=2, lty=2, col="blue")
lines(yhat.grid,tmp$fit+2*tmp$se.fit, lwd=2, lty=2, col="blue")
plot.new()
fits<-timefit$fitted.values
plot(fits,timeres,main="Residuals against fitted values")
abline(h=0, col="red")
loess.fit<-loess(y~x, data.frame(x=fits,y=timeres))
yhat.grid<-seq(from=min(fits),to=max(fits),length=200)
tmp<-predict(loess.fit,newdata=data.frame(x=yhat.grid), se=T)
lines(yhat.grid,tmp$fit,lwd=3, col="blue")
lines(yhat.grid,tmp$fit-2*tmp$se.fit, lwd=2, lty=2, col="blue")
lines(yhat.grid,tmp$fit+2*tmp$se.fit, lwd=2, lty=2, col="blue")
timesq<-time^2
timefitsq<-lm(marriages~time+timesq)
anova(timefitsq)
summary(timefitsq)
AIC(timefitsq)
plot(residuals(timefitsq))
timesqres<-residuals(timefitsq) ##
fits2<-timefitsq$fitted.values ##
plot(fits2,timesqres,main="Residuals against fitted values") ##
abline(h=0, col="red")
loess.fit<-loess(y~x, data.frame(x=fits2,y=timesqres)) ##
yhat.grid<-seq(from=min(fits2),to=max(fits2),length=200) ##
tmp<-predict(loess.fit,newdata=data.frame(x=yhat.grid), se=T)
lines(yhat.grid,tmp$fit,lwd=3, col="blue")
lines(yhat.grid,tmp$fit-2*tmp$se.fit, lwd=2, lty=2, col="blue")
acf(timeres)
lines(yhat.grid,tmp$fit+2*tmp$se.fit, lwd=2, lty=2, col="blue")
qqnorm(timeres)
qqline(timeres, col="red")
comparefit<-lm(marriages~mortality)
anova(comparefit)
summary(comparefit)
AIC(comparefit)
berk <- scan("berkeley.data", what=list(double(0),double(0),double(0)))
berk <- scan("berkeley.dat", what=list(double(0),double(0),double(0)))
time <- berk[[1]]
berkeley <- berk[[2]]
stbarb <- berk[[3]]
stbarb
par(mfrow=c(3,1))
plot.ts(berkeley)
plot.ts(stbarb)
plot(berkeley~stbarb)
par(mfrow=c(3,1))
main('title')
plot.ts(berkeley)
plot.ts(stbarb)
plot(berkeley~stbarb)
par(mfrow=c(3,1))
title('title')
plot.ts(berkeley)
plot.ts(stbarb)
plot(berkeley~stbarb)
par(mfrow=c(3,1))
plot.ts(berkeley)
plot.ts(stbarb)
plot(berkeley~stbarb)
timefit<-lm(berkeley~time)
anova(timefit)
summary(timefit)
AIC(timefit)
timefit<-lm(berkeley~time)
anova(timefit)
summary(timefit)
AIC(timefit)
timeres <- residuals(timefit)
plot(timeres)
abline(h=0, col="red")
acf(timeres)
qqnorm(timeres)
qqline(timeres, col="red")
par(mfrow=c(3,1))
timeres <- residuals(timefit)
plot(timeres)
abline(h=0, col="red")
acf(timeres)
qqnorm(timeres)
timefit <- lm(berkeley~stbarb)
anova(timefit)
summary(timefit)
AIC(timefit)
par(mfrow=c(3,1))
timeres <- residuals(timefit)
plot(timeres)
abline(h=0, col="red")
acf(timeres)
qqnorm(timeres)
anova(timefit)
timefit <- lm(berkeley~stbarb)
summary(timefit)
AIC(timefit)
anova(timefit)
par(mfrow=c(3,1))
timeres <- residuals(timefit)
plot(timeres)
abline(h=0, col="red")
acf(timeres)
qqnorm(timeres)
qqline(timeres, col="red")
timefit <- lm(berkeley~stbarb)
anova(timefit)
summary(timefit)
AIC(timefit)
```
```{r}
par(mfrow=c(3,1))
timeres <- residuals(timefit)
plot(timeres)
abline(h=0, col="red")
acf(timeres)
qqnorm(timeres)
qqline(timeres, col="red")
timefit <- lm(berkeley~time)
anova(timefit)
summary(timefit)
AIC(timefit)
```
```{r, echo=T}
par(mfrow=c(3,1))
timeres <- residuals(timefit)
plot(timeres)
abline(h=0, col="red")
acf(timeres)
qqnorm(timeres)
qqline(timeres, col="red")
timefit <- lm(berkeley~stbarb)
anova(timefit)
summary(timefit)
AIC(timefit)
```
```{r}
par(mfrow=c(3,1))
timeres <- residuals(timefit)
plot(timeres)
abline(h=0, col="red")
acf(timeres)
qqnorm(timeres)
qqline(timeres, col="red")
timefit <- lm(berkeley~time)
anova(timefit)
summary(timefit)
AIC(timefit)
```
```{r, echo=T}
par(mfrow=c(3,1))
timeres <- residuals(timefit)
plot(timeres)
abline(h=0, col="red")
acf(timeres)
qqnorm(timeres)
qqline(timeres, col="red")
plot.ts(berkeley)
plot.new()
plot.ts(berkeley)
acf(berkeley)
plot.new()
plot.ts(berkeley)
acf(berkeley, main = "ACF of Berkeley data")
plot.ts(berkeley)
plot.ts(berkeley, main = "Time Series of Berkeley data")
acf(berkeley, main = "ACF of Berkeley data")
plot.new()
plot.ts(berkeley, main = "Time Series of Berkeley data")
acf(berkeley, main = "ACF of Berkeley data")
diff(berkeley)
berk.diff <- diff(berkeley)
plot(berk.diff)
acf(berk.diff)
plot(berk.diff)
acf(berk.diff)
berk.diff <- diff(berkeley)
plot(berk.diff)
acf(berk.diff)
plot(berk.diff)
abline(.5)
abline(0)
abline(0,.5)
abline(.5, 0)
abline(0, 0)
berk.diff <- diff(berkeley)
plot(berk.diff)
abline(0, 0)
acf(berk.diff)
plot(berk.diff)
abline(0, 0)
acf(berk.diff)
ibm <- scan("dailyibm.dat", skip = 1)
plot (ibm, main = "IBM closing stock price Jan 1, 1980 to Oct 8, 1992")
plot (ibm, main = "IBM closing stock price Jan 1, 1980 to Oct 8, 1992", ylab = "closing stock price")
acf(ibm, main = "ACF plot of IBM closing stock prices")
plot.new()
plot.ts(berkeley, main = "Time Series of Berkeley data")
acf(berkeley, main = "ACF of Berkeley data")
plot.ts(berkeley, main = "Time Series of Berkeley data")
ibm <- scan("dailyibm.dat", skip = 1)
par(mfrow=c(2,1))
plot(ibm, main = "IBM closing stock price Jan 1, 1980 to Oct 8, 1992", ylab = "closing stock price")
acf(ibm, main = "ACF plot of IBM closing stock prices")
ibm.diff <- diff(ibm)
plot(ibm.diff, main = "Differenced IBM closing stock price Jan 1, 1980 to Oct 8, 1992", ylab = "closing stock price")
acf(ibm.diff, main = "Diffenced ACF plot of IBM closing stock prices")
ibm.log <- log(ibm)
ibm.log <- log(ibm)
par(mfrow=c(2,1))
plot(ibm.log, main = "Log plot IBM closing stock price Jan 1, 1980 to Oct 8, 1992", ylab = "closing stock price")
acf(ibm.log, main = "Log ACF plot of IBM closing stock prices")
plot(ibm, main = "IBM closing stock price Jan 1, 1980 to Oct 8, 1992", ylab = "closing stock price")
plot(ibm.log, main = "Log plot IBM closing stock price Jan 1, 1980 to Oct 8, 1992", ylab = "closing stock price")
acf(ibm.log, main = "Log ACF plot of IBM closing stock prices")
ibm.difflog <- diff(log(ibm))
par(mfrow=c(2,1))
plot(ibm.log, main = "Differenced Log plot IBM closing stock price Jan 1, 1980 to Oct 8, 1992", ylab = "closing stock price")
acf(ibm.log, main = "Differenced Log ACF plot of IBM closing stock prices")
ibm.difflog <- diff(log(ibm))
par(mfrow=c(2,1))
plot(ibm.log, main = "Differenced Log plot IBM closing stock price Jan 1, 1980 to Oct 8, 1992", ylab = "closing stock price")
acf(ibm.log, main = "Differenced Log ACF plot of IBM closing stock prices")
ibm.difflog <- log(diff(ibm))
par(mfrow=c(2,1))
plot(ibm.log, main = "Differenced Log plot IBM closing stock price Jan 1, 1980 to Oct 8, 1992", ylab = "closing stock price")
acf(ibm.log, main = "Differenced Log ACF plot of IBM closing stock prices")
ibm.difflog <- diff(log(ibm))
par(mfrow=c(2,1))
plot(ibm.difflog, main = "Differenced Log plot IBM closing stock price Jan 1, 1980 to Oct 8, 1992", ylab = "closing stock price")
acf(ibm.difflog, main = "Differenced Log ACF plot of IBM closing stock prices")
ibm.difflog <- log(diff(ibm))
par(mfrow=c(2,1))
plot(ibm.difflog, main = "Differenced Log plot IBM closing stock price Jan 1, 1980 to Oct 8, 1992", ylab = "closing stock price")
acf(ibm.difflog, main = "Differenced Log ACF plot of IBM closing stock prices")
acf(ibm.difflog, main = "Differenced Log ACF plot of IBM closing stock prices")
ibm.difflog <- log(diff(ibm))
par(mfrow=c(2,1))
plot(ibm.difflog, main = "Differenced Log plot IBM closing stock price Jan 1, 1980 to Oct 8, 1992", ylab = "closing stock price")
acf(ibm.difflog, main = "Differenced Log ACF plot of IBM closing stock prices")
ibm.difflog <- diff(log(ibm))
par(mfrow=c(2,1))
plot(ibm.difflog, main = "Differenced Log plot IBM closing stock price Jan 1, 1980 to Oct 8, 1992", ylab = "closing stock price")
acf(ibm.difflog, main = "Differenced Log ACF plot of IBM closing stock prices")
difflogibm <- diff(log(ibm))
par(mfrow=c(2,1))
plot(difflogibm , main = "Differenced Log plot IBM closing stock price Jan 1, 1980 to Oct 8, 1992", ylab = "closing stock price")
acf(difflogibm , main = "Differenced Log ACF plot of IBM closing stock prices")
diff.logibm <- difflogibm[difflogibm > -0.1]
diff.logibm <- difflogibm[difflogibm > -0.1]
par(mfrow=c(2,1))
difflogibm <- difflogibm[difflogibm > -0.1]
par(mfrow=c(2,1))
plot(difflogibm , main = "Differenced Log plot IBM closing stock price with outliers removed", ylab = "closing stock price")
acf(difflogibm , main = "Differenced Log ACF plot of IBM closing stock prices with outliers removed")
difflogibm <- diff(log(ibm))
par(mfrow=c(2,1))
plot(difflogibm , main = "Differenced Log plot IBM closing stock price Jan 1, 1980 to Oct 8, 1992", ylab = "closing stock price")
acf(difflogibm , main = "Differenced Log ACF plot of IBM closing stock prices")
difflogibm <- difflogibm[difflogibm > -0.1]
par(mfrow=c(2,1))
plot(difflogibm , main = "Differenced Log plot IBM closing stock price with outliers removed", ylab = "closing stock price")
acf(difflogibm , main = "Differenced Log ACF plot of IBM closing stock prices with outliers removed")
difflogibm1 <- difflogibm[1:500]
difflogibm2 <- difflogibm[501:length(difflogibm)]
difflogibm1 <- difflogibm[1:500]
par(mfrow=c(2,1))
plot(difflogibm , main = "First 500 values of Differenced Log plot IBM closing stock price with outliers removed", ylab = "closing stock price")
acf(difflogibm , main = "First 500 values of Differenced Log ACF plot of IBM closing stock prices with outliers removed")
difflogibm2 <- difflogibm[501:length(difflogibm)]
par(mfrow=c(2,1))
plot(difflogibm , main = "Remaining values of Differenced Log plot IBM closing stock price with outliers removed", ylab = "closing stock price")
acf(difflogibm , main = "Remaining values of Differenced Log ACF plot of IBM closing stock prices with outliers removed")
difflogibm1 <- difflogibm[1:500]
par(mfrow=c(2,1))
plot(difflogibm1, main = "First 500 values of Differenced Log plot IBM closing stock price with outliers removed", ylab = "closing stock price")
acf(difflogibm1, main = "First 500 values of Differenced Log ACF plot of IBM closing stock prices with outliers removed")
difflogibm2 <- difflogibm[501:length(difflogibm)]
par(mfrow=c(2,1))
plot(difflogibm2, main = "Remaining values of Differenced Log plot IBM closing stock price with outliers removed", ylab = "closing stock price")
acf(difflogibm2, main = "Remaining values of Differenced Log ACF plot of IBM closing stock prices with outliers removed")
difflogibm1 <- difflogibm[1:500]
par(mfrow=c(2,1))
plot(difflogibm1, main = "First 500 values of Differenced Log plot IBM closing stock price with outliers removed", ylab = "closing stock price")
acf(difflogibm1, main = "First 500 values of Differenced Log ACF plot of IBM closing stock prices with outliers removed")
difflogibm2 <- difflogibm[501:length(difflogibm)]
par(mfrow=c(2,1))
plot(difflogibm2, main = "Remaining values of Differenced Log plot IBM closing stock price with outliers removed", ylab = "closing stock price")
acf(difflogibm2, main = "Remaining values of Differenced Log ACF plot of IBM closing stock prices with outliers removed")
difflogibm1 <- difflogibm[1:500]
par(mfrow=c(2,1))
plot(difflogibm1, main = "First 500 values of Differenced Log plot IBM closing stock price with outliers removed", ylab = "closing stock price")
acf(difflogibm1, main = "First 500 values of Differenced Log ACF plot of IBM closing stock prices with outliers removed")
difflogibm2 <- difflogibm[501:length(difflogibm)]
par(mfrow=c(2,1))
plot(difflogibm2, main = "Remaining values of Differenced Log plot IBM closing stock price with outliers removed", ylab = "closing stock price")
