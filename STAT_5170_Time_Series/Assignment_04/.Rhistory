SSE <- sum((y-y_hat)^2)
SSE
# [1] 348.7212
# c.
SSE/(6-1)
SSE <- sum((y-y_hat)^2)
SSE
add(2,3)
add<-function(a,b){
result<-a+b
result}
add(2,3)
randomwalk<-function(sigsq,T)
{
x<-rep(0,T)
w<-rnorm(T,sd=sqrt(sigsq))
for ( i in 2:T)
{
x[i]<-x[i-1]+w[i]
}
x
}
randomwalk(0,1)
randomwalk(1,10)
acf(randomwalk(1,10))
acf(randomwalk(1,20))
acf(randomwalk(5,20))
x <- rep(0,10)
x
w <- rnorm(10, sd=sqrt(1))
w
w <- rnorm(10, sd=sqrt(1))
w
arsim<-function(phis, sigsq, T){
#find the number of lags in our AR
p<-length(phis)
#generate the white noise plus a few to get started
noise<-rnorm(T+p, sd=sqrt(sigsq))
#put the initial noise terms in and set the rest to zero
x<-c(noise[1:p],rep(0,T))
#this loop generates the AR series with the recursive formula
for (i in (p+1):(T+p))
{
x[i]<-phis %*% x[i-(1:p)] +noise[i]
}
#throw away those initial starting points
x<-x[(p+1):(T+p)]
#return the time series
x
}
arsim<-function(phis, sigsq, T){
#find the number of lags in our AR
p<-length(phis)
#generate the white noise plus a few to get started
noise<-rnorm(T+p, sd=sqrt(sigsq))
#put the initial noise terms in and set the rest to zero
x<-c(noise[1:p],rep(0,T))
#this loop generates the AR series with the recursive formula
for (i in (p+1):(T+p))
{
x[i]<-phis %*% x[i-(1:p)] +noise[i]
}
#throw away those initial starting points
x<-x[(p+1):(T+p)]
#return the time series
x
}
x1<-arsim(c(0.5), 1,200)
x1
plot.ts(x1)
plot.ts(x1)
x1<-arsim(0.5, 1,200)
plot.ts(x1)
acf(x1)
x1<-arsim(0.5, 0,200)
acf(x1)
x1<-arsim(0.5, 5,200)
acf(x1)
x1<-arsim(-0.5, 5,200)
acf(x1)
plot.ts(x1)
x1<-arsim(1, 5,200)
acf(x1)
plot.ts(x1)
x1<-arsim(1.1, 5,200)
acf(x1)
plot.ts(x1)
x1<-arsim(1.1, 5,200)
acf(x1)
x1<-arsim(1.2, 5,200)
acf(x1)
x1<-arsim(1.3, 5,200)
acf(x1)
x1<-arsim(1.001, 5,200)
acf(x1)
plot.ts(x1)
x1<-arsim(1.01, 5,200)
acf(x1)
plot.ts(x1)
ARIMA(0,0,1
ARIMA(0,0,1)
ARIMA(0,0,1)
x<-c(2,5,3)
m<-arima(x,order=c(0,0,1))
m
plot.ts(m)
masim=function(thetas, sigsq, T){
q=length(thetas)
noise=rnorm(T+q, sd=sqrt(sigsq)) #put the initial noise terms in and set the rest to zero
x=c(noise[1:q],rep(0,T))
for (i in (q+1):(T+q)){ #this loop generates the MA series
x[i]=thetas %*% noise[i-(1:q)] +noise[i]
}
x=x[(q+1):(T+q)] #throw away those initial starting points x
}
}
masim(c(0.5, 2), 1, 10000)
ma1 <- masim(c(0.5, 2), 1, 10000)
plot.ts(ma1)
acf(ma1)
x2 <- arsim(c(0.5, 2), 1, 10000)
plot.ts(x2)
acf(x2)
x2 <- arsim(c(0.5, 2), 50, 10000)
plot.ts(x2)
x2 <- arsim(c(0.5, 2), 50, 200)
plot.ts(x2)
acf(x2)
x2 <- arsim(c(0.5, 2), 50, 200)
x2 <- arsim(c(0.5, 2), 50, 200)
plot.ts(x2)
acf(x2)
x2 <- arsim(c(0.5, 2), 50, 200)
plot.ts(x2)
acf(x2)
x2 <- arsim(c(0.5, 2), 50, 200)
plot.ts(x2)
acf(x2)
x2 <- arsim(c(0.5, 2), 50, 10000)
plot.ts(x2)
acf(x2)
x2 <- arsim(c(0.5, 2), 50, 10000)
plot.ts(x2)
x2 <- arsim(c(0.5, 2), 50, 1000)
plot.ts(x2)
acf(x2)
x2 <- arsim(c(0.5, 2), 50, 100)
plot.ts(x2)
acf(x2)
x2 <- arsim(c(0.5, 2), 50, 10)
plot.ts(x2)
acf(x2)
plot.ts(x2)
masim(c(0.5, 2), 1, 10000)
masim=function(thetas, sigsq, T)
{
# find the number of lags
q <- length(thetas)
# generate the white noise plus a few to get started
noise <- rnorm(T+q, sd=sqrt(sigsq))
# put the initial noise terms in and set the rest to zero
x <- c(noise[1:q], rep(0,T))
#this loop generates the MA series with the recursive formula
for (i in (q+1):(T+q))
{
x[i]=thetas %*% noise[i-(1:q)] +noise[i]
}
#throw away those initial starting points
x=x[(q+1):(T+q)]
#return the time series
x
}
n <- 100
x <- rnorm(n)
y <- 2*x + rnorm(n)
out <- lm(y ~ x)
library(knitr)
library('gtools')
library('gtools')
group <- c('deprived', 'deprived', 'deprived', 'undeprived', 'undeprived')
chg_perf <- c(7.2, -10.7, 21.8, 25.2, 11.6)
perf <- data.frame(group,chg_perf)
names(perf) <- c('group', 'performance')
performance
ranks = rank(perf$performance)
W.obs = sum(ranks[perf$group=="deprived"])
deprived.ranks = combinations(5, 3, v=ranks, set=F, repeats.allowed=F)
W = rep(NA, choose(5,3))
for(i in 1:choose(5,3)){
W[i] = sum(deprived.ranks[i,])
}
sum(W <= W.obs)/choose(5,3)
names(perf) <- c('group', 'performance')
obs <- c(-10.7, 7.2, 11.6, 21.8)
rank <- c(1, 2, 3, 4, 5)
table.1 <- cbind(obs, rank)
obs <- transpose(c(-10.7, 7.2, 11.6, 21.8))
obs <- t(c(-10.7, 7.2, 11.6, 21.8))
rank <- t(c(1, 2, 3, 4, 5))
table.1 <- cbind(obs, rank)
table.1
table.1 < matrix(c(-10.7, 7.2, 11.6, 21.8, 1, 2, 3, 4, 5), ncol = 2, byrow = T)
table.1
table.1 < matrix(c(-10.7, 7.2, 11.6, 21.8, 1, 2, 3, 4, 5), ncol = 2, byrow = T)
help(matrix)
table.1 < matrix(c(-10.7, 7.2, 11.6, 21.8, 1, 2, 3, 4, 5), ncol = 1, byrow = T)
table.1
table.1 <- cbind(obs, rank)
table.1
obs
obs <- (c(-10.7, 7.2, 11.6, 21.8)
obs
obs <- c(-10.7, 7.2, 11.6, 21.8)
obs
table.1 < matrix(c(-10.7, 7.2, 11.6, 21.8, 25.2, 1, 2, 3, 4, 5), ncol = 2, byrow = T)
table.1 < matrix(c(-10.7, 7.2, 11.6, 21.8, 25.2, 1, 2, 3, 4, 5), ncol = 2, byrow = F)
help(data.frame)
x <- data.frame(obs, rank)
x
obs <- c(-10.7, 7.2, 11.6, 21.8)
rank <- c(1, 2, 3, 4, 5)
x <- data.frame(obs, rank)
x
x <- data.frame(obs, rank)
obs <- c(-10.7, 7.2, 11.6, 21.8, 25.2)
rank <- c(1, 2, 3, 4, 5)
x <- data.frame(obs, rank)
x
install.packages('knitr)
install.packages('knitr')
install.packages('knitr')
install.packages("knitr")
library(knitr)
kable(head(iris[,1:3]), format = "markdown")
help(kable)
kable(obs, format = "markdown")
kable(obs, row.names = c('obs', 'rank') format = "markdown")
kable(obs, row.names = c('obs', 'rank'), format = "markdown")
kable(obs, rank, row.names = c('obs', 'rank'), format = "markdown")
library('gtools')
group <- c('deprived', 'deprived', 'deprived', 'undeprived', 'undeprived')
chg_perf <- c(7.2, -10.7, 21.8, 25.2, 11.6)
perf <- data.frame(group,chg_perf)
names(perf) <- c('group', 'performance')
ranks = rank(perf$performance)
W.obs = sum(ranks[perf$group=="deprived"])
deprived.ranks = combinations(5, 3, v=ranks, set=F, repeats.allowed=F)
W = rep(NA, choose(5,3))
for(i in 1:choose(5,3)){
W[i] = sum(deprived.ranks[i,])
}
sum(W <= W.obs)/choose(5,3)
library('gtools')
group <- c('deprived', 'deprived', 'deprived', 'undeprived', 'undeprived')
chg_perf <- c(7.2, -10.7, 21.8, 25.2, 11.6)
perf <- data.frame(group,chg_perf)
names(perf) <- c('group', 'performance')
ranks = rank(perf$performance)
W.obs = sum(ranks[perf$group=="deprived"])
deprived.ranks = combinations(5, 3, v=ranks, set=F, repeats.allowed=F)
W = rep(NA, choose(5,3))
for(i in 1:choose(5,3)){
W[i] = sum(deprived.ranks[i,])
}
sum(W != W.obs)/choose(5,3)
sleepdep <- read.table('sleepdep.txt', header=T)
sleepdep
names(sleepdep) <- c('group', 'performance')
dim(sleepdep)
choose(21,11)
ranks = rank(sleepdep$performance)
W.obs = sum(ranks[group=="deprived"])
deprived.ranks = combinations(21, 11, v=ranks, set=F, repeats.allowed=F)
W = rep(NA, choose(21,11))
for(i in 1:choose(21,11)){
W[i] = sum(deprived.ranks[i,])
}
sum(W >= W.obs)/choose(21,11)
```
sleepdep <- read.table('sleepdep.txt', header=T)
setwd("C:/Users/Frank/Desktop/STAT 3480/Lab 3")
setwd("C:/Users/Frank/Desktop/STAT 3480/Lab 3")
sleepdep <- read.table('sleepdep.txt', header=T)
names(sleepdep) <- c('group', 'performance')
choose(21,11)
ranks = rank(sleepdep$performance)
W.obs = sum(ranks[group=="deprived"])
deprived.ranks = combinations(21, 11, v=ranks, set=F, repeats.allowed=F)
W = rep(NA, choose(21,11))
for(i in 1:choose(21,11)){
W[i] = sum(deprived.ranks[i,])
}
sum(W >= W.obs)/choose(21,11)
rank(performance)
rank(performance)
rank(performance$sleepdep)
rank(sleepdep$performance)
setwd("C:/Users/Frank/Desktop/STAT 3480/Lab 3")
sleepdep <- read.table('sleepdep.txt', header=T)
names(sleepdep) <- c('group', 'performance')
ranks = rank(sleepdep$performance)
W.obs = sum(ranks[group=="deprived"])
deprived.ranks = combinations(21, 11, v=ranks, set=F, repeats.allowed=F)
W = rep(NA, choose(21,11))
for(i in 1:choose(21,11)){
W[i] = sum(deprived.ranks[i,])
}
sum(W <= W.obs)/choose(21,11)
sum(W > 123)/choose(21,11)
sum(W > 123)/choose(21,11) + sum(W < 75)/choose(21,11)
setwd("C:/Users/Frank/Desktop/STAT 3480/Lab 3")
sleepdep <- read.table('sleepdep.txt', header=T)
names(sleepdep) <- c('group', 'performance')
ranks = rank(sleepdep$performance)
W.obs = sum(ranks[group=="undeprived"])
deprived.ranks = combinations(21, 11, v=ranks, set=F, repeats.allowed=F)
W = rep(NA, choose(21,11))
for(i in 1:choose(21,11)){
W[i] = sum(deprived.ranks[i,])
}
sum(W >= W.obs)/choose(21,11)
1-sum(W >= W.obs)/choose(21,11)
1-sum(W <= W.obs)/choose(21,11)
sum(W <= W.obs)/choose(21,11)
head(sleepdep)
tail(sleepdep)
setwd("C:/Users/Frank/Desktop/STAT 3480/Lab 3")
sleepdep <- read.table('sleepdep.txt', header=T)
names(sleepdep) <- c('group', 'performance')
ranks = rank(sleepdep$performance)
W.obs = sum(ranks[group=="undeprived"])
deprived.ranks = combinations(21, 11, v=ranks, set=F, repeats.allowed=F)
W = rep(NA, choose(21,11))
for(i in 1:choose(21,11)){
W[i] = sum(deprived.ranks[i,])
}
sum(W <= W.obs)/choose(21,11)
W.obs = sum(ranks[group=="undeprived"])
names(sleepdep) <- c('group', 'performance')
ranks = rank(sleepdep$performance)
W.obs = sum(ranks[group=="undeprived"])
attach(sleepdep)
ranks = rank(sleepdep$performance)
W.obs = sum(ranks[group=="undeprived"])
deprived.ranks = combinations(21, 11, v=ranks, set=F, repeats.allowed=F)
W = rep(NA, choose(21,11))
for(i in 1:choose(21,11)){
W[i] = sum(deprived.ranks[i,])
}
sum(W <= W.obs)/choose(21,11)
sum(W >= W.obs)/choose(21,11)
sum(W > W.obs)/choose(21,11)
sum(W <= W.obs)/choose(21,11)
1-sum(W <= W.obs)/choose(21,11)
setwd("C:/Users/Frank/Desktop/STAT 3480/Lab 3")
sleepdep <- read.table('sleepdep.txt', header=T)
names(sleepdep) <- c('group', 'performance')
ranks = rank(sleepdep$performance)
W.obs = sum(ranks[group=="deprived"])
deprived.ranks = combinations(21, 11, v=ranks, set=F, repeats.allowed=F)
W = rep(NA, choose(21,11))
for(i in 1:choose(21,11)){
W[i] = sum(deprived.ranks[i,])
}
sum(W >= W.obs)/choose(21,11)
sum(W >= W.obs)/choose(21,11)
setwd("C:/Users/Frank/Desktop/STAT 3480/Lab 3")
sleepdep <- read.table('sleepdep.txt', header=T)
names(sleepdep) <- c('group', 'performance')
ranks = rank(sleepdep$performance)
W.obs = sum(ranks[group=="deprived"])
deprived.ranks = combinations(21, 11, v=ranks, set=F, repeats.allowed=F)
W = rep(NA, choose(21,11))
for(i in 1:choose(21,11)){
W[i] = sum(deprived.ranks[i,])
}
sum(W >= W.obs)/choose(21,11)
attach(sleepdep)
names(sleepdep) <- c('group', 'performance')
ranks = rank(sleepdep$performance)
W.obs = sum(ranks[group=="deprived"])
deprived.ranks = combinations(21, 11, v=ranks, set=F, repeats.allowed=F)
W = rep(NA, choose(21,11))
for(i in 1:choose(21,11)){
W[i] = sum(deprived.ranks[i,])
}
sum(W >= W.obs)/choose(21,11)
engtemp<-scan("tpmon.dat",skip=1)
setwd("C:/Users/Frank/Desktop/STAT 5170/Assignment 4")
engtemp<-scan("tpmon.dat",skip=1)
plot.ts(engtemp)
plot(engtemp)
acf(engtemp)
plot(engtemp)
plot.ts(engtemp)
plot.ts(engtemp2)
engtemp2<-engtemp[1:300]
plot.ts(engtemp2)
acf(engtemp2)
plot.ts(engtemp, main = "monthly temperature of England, 1723 to 1970 (celsius)", ylab = " temperature")
plot.ts(engtemp2, main = "first 300 observations of monthly temperature of England, 1723 to 1970 (celsius)", ylab = " temperature")
help(acf)
t = (1:length(engtemp))
b2 <- cos(2*pi*(1/12)*(1:length(engtemp)))
b3 <- sin(2*pi*(1/12)*(1:length(engtemp)))
lm(engtemp~b2+b3)
summary(lm(engtemp~b2+b3))
ols.b <- lm(engtemp~b2+b3)
ols.b
par(mfrow=c(2,1))
plot(ols.b$residuals)
acf(ols.b$residuals)
plot(ols.b$residuals)
plot.ts(engtemp2, main = "first 300 observations monthly temp (C) of England, 1723 to 1970", ylab = " temperature")
plot.ts(ols.b$residuals)
plot(ols.b$residuals, main = "Residual plot of B1 + B2*cos(2*pi*(1/12)*t + B3*sin(2*pi*(1/12)")
plot.ts(engtemp, main = "monthly temperature (C) of England, 1723 to 1970", ylab = " temperature")
plot.ts(engtemp2, main = "first 300 observations monthly temp (C) of England, 1723 to 1970", ylab = " temperature")
acf(engtemp2, main = "Autocorrelation Function of monthly temperature of England")
acf(ols.b$residuals, main = "ACF plot of B1 + B2*cos(2*pi*(1/12)*t + B3*sin(2*pi*(1/12)")
plot(ols.b$residuals, main = "Residual plot of B1 + B2*cos(2*pi*(1/12)*t + B3*sin(2*pi*(1/12)",
ylab = "residuals")
plot.ts(engtemp2, main = "first 300 observations monthly temp (C) of England, 1723 to 1970",
ylab = " temperature")
plot.ts(ols.b$residuals, main = "Residual plot of B1 + B2*cos(2*pi*(1/12)*t + B3*sin(2*pi*(1/12)",
ylab = "residuals")
plot.ts(engtemp, main = "monthly temperature (C) of England, 1723 to 1970", ylab = " temperature")
plot(ols.b$residuals, main = "Residual plot of B1 + B2*cos(2*pi*(1/12)*t + B3*sin(2*pi*(1/12)",
ylab = "residuals")
globtemp.dat
globtemp <- scan("globtemp.dat"")
globtemp <- scan("globtemp.dat")
globtemp <- scan("globtemp.dat")
globtemp
plot(globtemp)
plot(globtemp, main = "global temperature data points",
ylab = "temperature")
line1 <- filter(gas,sides=2,rep(1,13)/13)
line2 <- filter(gas,sides=2,rep(1,13)/13)
line3 <- filter(gas,sides=2,rep(1,13)/13)
line1 <- filter(globtemp,sides=2,rep(1,13)/13)
line2 <- filter(globtemp,sides=2,rep(1,13)/13)
line3 <- filter(globtemp,sides=2,rep(1,13)/13)
legend("topleft", c("13","9", "3" ), lty=c(1,2), col=c("red","blue"))
legend("topleft", c("13","9", "3" ), lty=c(1,2,3), col=c("red","blue", "green"))
lines(line1, lty=2, col="blue")
plot(globtemp, main = "global temperature data points",
ylab = "temperature")
line1 <- filter(globtemp,sides=2,rep(1,13)/13)
line2 <- filter(globtemp,sides=2,rep(1,13)/13)
line3 <- filter(globtemp,sides=2,rep(1,13)/13)
lines(line1, lty=1, col="red")
lines(line2, lty=2, col="blue")
lines(line3, lty=3, col="green")
legend("topleft", c("13","9", "3" ), lty=c(1,2,3), col=c("red","blue", "green"))
plot(globtemp, main = "global temperature data points",
ylab = "temperature")
line1 <- filter(globtemp,sides=2,rep(1,20)/20)
line2 <- filter(globtemp,sides=2,rep(1,13)/13)
line3 <- filter(globtemp,sides=2,rep(1,5)/5)
lines(line1, lty=1, col="red")
lines(line2, lty=2, col="blue")
lines(line3, lty=3, col="green")
legend("topleft", c("13","9", "3" ), lty=c(1,2,3), col=c("red","blue", "green"))
lines(line3, lty=3, col="black")
legend("topleft", c("13","9", "3" ), lty=c(1,2,3), col=c("red","blue", "black"))
plot(globtemp, main = "global temperature data points with smoothing lines",
ylab = "temperature")
line1 <- filter(globtemp,sides=2,rep(1,20)/20)
line2 <- filter(globtemp,sides=2,rep(1,13)/13)
line3 <- filter(globtemp,sides=2,rep(1,5)/5)
lines(line1, lty=1, col="red")
lines(line3, lty=3, col="black")
lines(line2, lty=2, col="blue")
legend("topleft", c("20 bandwidth","13 bandwidth", "5 bandwidth" ), lty=c(1,2,3), col=c("red","blue", "black"))
5
5
line1 <- filter(globtemp,sides=2,rep(1,25)/25)
line2 <- filter(globtemp,sides=2,rep(1,13)/13)
line3 <- filter(globtemp,sides=2,rep(1,5)/5)
lines(line1, lty=1, col="red")
lines(line2, lty=2, col="blue")
lines(line3, lty=3, col="black")
legend("topleft", c("20 bandwidth","13 bandwidth", "5 bandwidth" ), lty=c(1,2,3), col=c("red","blue", "black"))
plot(globtemp, main = "global temperature data points with smoothing lines",
ylab = "temperature")
line1 <- filter(globtemp,sides=2,rep(1,25)/25)
line2 <- filter(globtemp,sides=2,rep(1,13)/13)
line3 <- filter(globtemp,sides=2,rep(1,5)/5)
lines(line1, lty=1, col="red")
lines(line2, lty=2, col="blue")
lines(line3, lty=3, col="black")
legend("topleft", c("20 bandwidth","13 bandwidth", "5 bandwidth" ), lty=c(1,2,3), col=c("red","blue", "black"))
plot(globtemp, main = "global temperature data points with moving average smoothing lines",
ylab = "temperature")
line1 <- filter(globtemp,sides=2,rep(1,25)/25)
line2 <- filter(globtemp,sides=2,rep(1,13)/13)
line3 <- filter(globtemp,sides=2,rep(1,3)/3)
lines(line1, lty=1, col="red")
lines(line2, lty=2, col="blue")
lines(line3, lty=3, col="black")
plot.ts(globtemp, main = "global temperature data points with moving average smoothing lines",
ylab = "temperature")
plot(globtemp, main = "global temperature data points with moving average smoothing lines",
ylab = "temperature")
line1 <- filter(globtemp,sides=2,rep(1,25)/25)
line2 <- filter(globtemp,sides=2,rep(1,13)/13)
line3 <- filter(globtemp,sides=2,rep(1,3)/3)
lines(line1, lty=1, col="red")
lines(line2, lty=2, col="blue")
lines(line3, lty=3, col="black")
legend("topleft", c("25 bandwidth","13 bandwidth", "3 bandwidth" ), lty=c(1,2,3), col=c("red","blue", "black"))
